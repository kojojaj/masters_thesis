
masters_thesis_emulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002834  08002834  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002834  08002834  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002834  08002834  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800283c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080028ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080028ac  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000559d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001423  00000000  00000000  0002563d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00026a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  00027098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c24  00000000  00000000  00027608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007298  00000000  00000000  0004d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e461a  00000000  00000000  000544c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138ade  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a68  00000000  00000000  00138b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002774 	.word	0x08002774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002774 	.word	0x08002774

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 030c 	add.w	r3, r7, #12
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <MX_GPIO_Init+0xc4>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029a:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <MX_GPIO_Init+0xc4>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a2:	4b28      	ldr	r3, [pc, #160]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a6:	f003 0304 	and.w	r3, r3, #4
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b25      	ldr	r3, [pc, #148]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b2:	4a24      	ldr	r2, [pc, #144]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002b4:	f043 0302 	orr.w	r3, r3, #2
 80002b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d2:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 80002de:	2200      	movs	r2, #0
 80002e0:	f64f 0106 	movw	r1, #63494	; 0xf806
 80002e4:	4818      	ldr	r0, [pc, #96]	; (8000348 <MX_GPIO_Init+0xc8>)
 80002e6:	f000 ff61 	bl	80011ac <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_LEFT_Pin;
 80002ea:	f44f 7358 	mov.w	r3, #864	; 0x360
 80002ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002f4:	2302      	movs	r3, #2
 80002f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	4619      	mov	r1, r3
 80002fe:	4813      	ldr	r0, [pc, #76]	; (800034c <MX_GPIO_Init+0xcc>)
 8000300:	f000 fd92 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000304:	f64f 0306 	movw	r3, #63494	; 0xf806
 8000308:	60fb      	str	r3, [r7, #12]
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4619      	mov	r1, r3
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <MX_GPIO_Init+0xc8>)
 800031e:	f000 fd83 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_ENTER_Pin;
 8000322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800032c:	2302      	movs	r3, #2
 800032e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_ENTER_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 030c 	add.w	r3, r7, #12
 8000334:	4619      	mov	r1, r3
 8000336:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_GPIO_Init+0xc8>)
 8000338:	f000 fd76 	bl	8000e28 <HAL_GPIO_Init>

}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	48000400 	.word	0x48000400
 800034c:	48000800 	.word	0x48000800

08000350 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000350:	b5b0      	push	{r4, r5, r7, lr}
 8000352:	b08a      	sub	sp, #40	; 0x28
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800035e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800036a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800036c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800036e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f80e 	bl	80003a6 <Lcd_init>

	return lcd;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	461d      	mov	r5, r3
 800038e:	f107 0410 	add.w	r4, r7, #16
 8000392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800039a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800039e:	68f8      	ldr	r0, [r7, #12]
 80003a0:	3728      	adds	r7, #40	; 0x28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bdb0      	pop	{r4, r5, r7, pc}

080003a6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	7d9b      	ldrb	r3, [r3, #22]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d10c      	bne.n	80003d0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80003b6:	2133      	movs	r1, #51	; 0x33
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 f86f 	bl	800049c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80003be:	2132      	movs	r1, #50	; 0x32
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 f86b 	bl	800049c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80003c6:	2128      	movs	r1, #40	; 0x28
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f867 	bl	800049c <lcd_write_command>
 80003ce:	e003      	b.n	80003d8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80003d0:	2138      	movs	r1, #56	; 0x38
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f862 	bl	800049c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80003d8:	2101      	movs	r1, #1
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f000 f85e 	bl	800049c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80003e0:	210c      	movs	r1, #12
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 f85a 	bl	800049c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80003e8:	2106      	movs	r1, #6
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 f856 	bl	800049c <lcd_write_command>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	683a      	ldr	r2, [r7, #0]
 8000408:	4906      	ldr	r1, [pc, #24]	; (8000424 <Lcd_int+0x2c>)
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fd44 	bl	8001e98 <siprintf>

	Lcd_string(lcd, buffer);
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f806 	bl	8000428 <Lcd_string>
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	0800278c 	.word	0x0800278c

08000428 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000432:	2300      	movs	r3, #0
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e00a      	b.n	800044e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f858 	bl	80004f8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	3301      	adds	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	7bfc      	ldrb	r4, [r7, #15]
 8000450:	6838      	ldr	r0, [r7, #0]
 8000452:	f7ff febd 	bl	80001d0 <strlen>
 8000456:	4603      	mov	r3, r0
 8000458:	429c      	cmp	r4, r3
 800045a:	d3ed      	bcc.n	8000438 <Lcd_string+0x10>
	}
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bd90      	pop	{r4, r7, pc}
	...

08000468 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
 8000474:	4613      	mov	r3, r2
 8000476:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	4a07      	ldr	r2, [pc, #28]	; (8000498 <Lcd_cursor+0x30>)
 800047c:	5cd2      	ldrb	r2, [r2, r3]
 800047e:	78bb      	ldrb	r3, [r7, #2]
 8000480:	4413      	add	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	3b80      	subs	r3, #128	; 0x80
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f806 	bl	800049c <lcd_write_command>
	#endif
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	080027bc 	.word	0x080027bc

0800049c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6898      	ldr	r0, [r3, #8]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	899b      	ldrh	r3, [r3, #12]
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	f000 fe7a 	bl	80011ac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	7d9b      	ldrb	r3, [r3, #22]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	091b      	lsrs	r3, r3, #4
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2204      	movs	r2, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f842 	bl	8000554 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2204      	movs	r2, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f839 	bl	8000554 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80004e2:	e005      	b.n	80004f0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2208      	movs	r2, #8
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f832 	bl	8000554 <lcd_write>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6898      	ldr	r0, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	899b      	ldrh	r3, [r3, #12]
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f000 fe4c 	bl	80011ac <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7d9b      	ldrb	r3, [r3, #22]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	091b      	lsrs	r3, r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2204      	movs	r2, #4
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f814 	bl	8000554 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2204      	movs	r2, #4
 8000536:	4619      	mov	r1, r3
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f80b 	bl	8000554 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800053e:	e005      	b.n	800054c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2208      	movs	r2, #8
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f804 	bl	8000554 <lcd_write>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e019      	b.n	800059e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	8819      	ldrh	r1, [r3, #0]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	fa42 f303 	asr.w	r3, r2, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f000 fe0a 	bl	80011ac <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfa      	ldrb	r2, [r7, #15]
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3e1      	bcc.n	800056a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6918      	ldr	r0, [r3, #16]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	8a9b      	ldrh	r3, [r3, #20]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	f000 fdfb 	bl	80011ac <HAL_GPIO_WritePin>
	DELAY(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fb2c 	bl	8000c14 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6918      	ldr	r0, [r3, #16]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	8a9b      	ldrh	r3, [r3, #20]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 fdf0 	bl	80011ac <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b09e      	sub	sp, #120	; 0x78
 80005d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 faa6 	bl	8000b2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f98d 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f7ff fe4d 	bl	8000280 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { LCD_D4_GPIO_Port, LCD_D5_GPIO_Port, LCD_D6_GPIO_Port, LCD_D7_GPIO_Port };
 80005e6:	4bbd      	ldr	r3, [pc, #756]	; (80008dc <main+0x308>)
 80005e8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80005ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 80005f2:	4abb      	ldr	r2, [pc, #748]	; (80008e0 <main+0x30c>)
 80005f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fc:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_4_BIT_MODE);
 8000600:	4638      	mov	r0, r7
 8000602:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000606:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800060a:	2300      	movs	r3, #0
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	4bb3      	ldr	r3, [pc, #716]	; (80008e4 <main+0x310>)
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4bb1      	ldr	r3, [pc, #708]	; (80008e4 <main+0x310>)
 8000620:	f7ff fe96 	bl	8000350 <Lcd_create>
 8000624:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000628:	463d      	mov	r5, r7
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000632:	e884 0003 	stmia.w	r4, {r0, r1}

  bool isEnterPressed = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  enum pos {UNITIES = 7, TENTHS = 9, HUNDREDTHS = 10, UNITS = 12};
  int m = 150;
 800063c:	2396      	movs	r3, #150	; 0x96
 800063e:	663b      	str	r3, [r7, #96]	; 0x60
  int cursor_pos = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	65fb      	str	r3, [r7, #92]	; 0x5c
  char lcd_infoText[] = "masa = ";
 8000644:	4aa8      	ldr	r2, [pc, #672]	; (80008e8 <main+0x314>)
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800064e:	e883 0003 	stmia.w	r3, {r0, r1}
  char lcd_unitText[] = "[kg]";
 8000652:	4aa6      	ldr	r2, [pc, #664]	; (80008ec <main+0x318>)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	6018      	str	r0, [r3, #0]
 800065e:	3304      	adds	r3, #4
 8000660:	7019      	strb	r1, [r3, #0]
  Lcd_cursor(&lcd, 0, cursor_pos);
 8000662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000664:	b2da      	uxtb	r2, r3
 8000666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fefb 	bl	8000468 <Lcd_cursor>
  Lcd_string(&lcd, lcd_infoText);
 8000672:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fed3 	bl	8000428 <Lcd_string>
  cursor_pos = strlen(lcd_infoText);
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff fda2 	bl	80001d0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  Lcd_cursor(&lcd, 0, cursor_pos);
 8000690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000692:	b2da      	uxtb	r2, r3
 8000694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fee4 	bl	8000468 <Lcd_cursor>
  Lcd_int(&lcd, m/100);
 80006a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80006a2:	4a93      	ldr	r2, [pc, #588]	; (80008f0 <main+0x31c>)
 80006a4:	fb82 1203 	smull	r1, r2, r2, r3
 80006a8:	1152      	asrs	r2, r2, #5
 80006aa:	17db      	asrs	r3, r3, #31
 80006ac:	1ad2      	subs	r2, r2, r3
 80006ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fe9f 	bl	80003f8 <Lcd_int>
  Lcd_string(&lcd, ".");
 80006ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006be:	498d      	ldr	r1, [pc, #564]	; (80008f4 <main+0x320>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff feb1 	bl	8000428 <Lcd_string>
  Lcd_int(&lcd, m%100);
 80006c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80006c8:	4a89      	ldr	r2, [pc, #548]	; (80008f0 <main+0x31c>)
 80006ca:	fb82 1203 	smull	r1, r2, r2, r3
 80006ce:	1151      	asrs	r1, r2, #5
 80006d0:	17da      	asrs	r2, r3, #31
 80006d2:	1a8a      	subs	r2, r1, r2
 80006d4:	2164      	movs	r1, #100	; 0x64
 80006d6:	fb01 f202 	mul.w	r2, r1, r2
 80006da:	1a9a      	subs	r2, r3, r2
 80006dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe88 	bl	80003f8 <Lcd_int>
  Lcd_cursor(&lcd, 0, UNITS);
 80006e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006ec:	220c      	movs	r2, #12
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff feb9 	bl	8000468 <Lcd_cursor>
  Lcd_string(&lcd, lcd_unitText);
 80006f6:	f107 021c 	add.w	r2, r7, #28
 80006fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fe91 	bl	8000428 <Lcd_string>

  while (isEnterPressed == false)
 8000706:	e0e0      	b.n	80008ca <main+0x2f6>
  {
	  if(HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) == GPIO_PIN_SET && m < 300){
 8000708:	2120      	movs	r1, #32
 800070a:	487b      	ldr	r0, [pc, #492]	; (80008f8 <main+0x324>)
 800070c:	f000 fd36 	bl	800117c <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d157      	bne.n	80007c6 <main+0x1f2>
 8000716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000718:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800071c:	da53      	bge.n	80007c6 <main+0x1f2>
		  HAL_Delay(CLICK_TIME);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f000 fa78 	bl	8000c14 <HAL_Delay>
		  m++;
 8000724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000726:	3301      	adds	r3, #1
 8000728:	663b      	str	r3, [r7, #96]	; 0x60
		  Lcd_cursor(&lcd, 0, cursor_pos);
 800072a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800072c:	b2da      	uxtb	r2, r3
 800072e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fe97 	bl	8000468 <Lcd_cursor>
		  Lcd_int(&lcd, m/100);
 800073a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800073c:	4a6c      	ldr	r2, [pc, #432]	; (80008f0 <main+0x31c>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1152      	asrs	r2, r2, #5
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad2      	subs	r2, r2, r3
 8000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074c:	4611      	mov	r1, r2
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fe52 	bl	80003f8 <Lcd_int>
		  Lcd_string(&lcd, ".");
 8000754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000758:	4966      	ldr	r1, [pc, #408]	; (80008f4 <main+0x320>)
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fe64 	bl	8000428 <Lcd_string>
		  if (m%100 < 10){
 8000760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000762:	4b63      	ldr	r3, [pc, #396]	; (80008f0 <main+0x31c>)
 8000764:	fb83 1302 	smull	r1, r3, r3, r2
 8000768:	1159      	asrs	r1, r3, #5
 800076a:	17d3      	asrs	r3, r2, #31
 800076c:	1acb      	subs	r3, r1, r3
 800076e:	2164      	movs	r1, #100	; 0x64
 8000770:	fb01 f303 	mul.w	r3, r1, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	2b09      	cmp	r3, #9
 8000778:	dc13      	bgt.n	80007a2 <main+0x1ce>
			  Lcd_cursor(&lcd, 0, TENTHS);
 800077a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077e:	2209      	movs	r2, #9
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe70 	bl	8000468 <Lcd_cursor>
			  Lcd_int(&lcd, 0);
 8000788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe32 	bl	80003f8 <Lcd_int>
			  Lcd_cursor(&lcd, 0, HUNDREDTHS);
 8000794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000798:	220a      	movs	r2, #10
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe63 	bl	8000468 <Lcd_cursor>
		  }
		  Lcd_int(&lcd, m%100);
 80007a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007a4:	4a52      	ldr	r2, [pc, #328]	; (80008f0 <main+0x31c>)
 80007a6:	fb82 1203 	smull	r1, r2, r2, r3
 80007aa:	1151      	asrs	r1, r2, #5
 80007ac:	17da      	asrs	r2, r3, #31
 80007ae:	1a8a      	subs	r2, r1, r2
 80007b0:	2164      	movs	r1, #100	; 0x64
 80007b2:	fb01 f202 	mul.w	r2, r1, r2
 80007b6:	1a9a      	subs	r2, r3, r2
 80007b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe1a 	bl	80003f8 <Lcd_int>
 80007c4:	e081      	b.n	80008ca <main+0x2f6>
	  } else if (HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) == GPIO_PIN_SET && m > 0) {
 80007c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ca:	484b      	ldr	r0, [pc, #300]	; (80008f8 <main+0x324>)
 80007cc:	f000 fcd6 	bl	800117c <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d156      	bne.n	8000884 <main+0x2b0>
 80007d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007d8:	2b00      	cmp	r3, #0
 80007da:	dd53      	ble.n	8000884 <main+0x2b0>
		  HAL_Delay(CLICK_TIME);
 80007dc:	2064      	movs	r0, #100	; 0x64
 80007de:	f000 fa19 	bl	8000c14 <HAL_Delay>
		  m--;
 80007e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007e4:	3b01      	subs	r3, #1
 80007e6:	663b      	str	r3, [r7, #96]	; 0x60
		  Lcd_cursor(&lcd, 0, cursor_pos);
 80007e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fe38 	bl	8000468 <Lcd_cursor>
		  Lcd_int(&lcd, m/100);
 80007f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007fa:	4a3d      	ldr	r2, [pc, #244]	; (80008f0 <main+0x31c>)
 80007fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000800:	1152      	asrs	r2, r2, #5
 8000802:	17db      	asrs	r3, r3, #31
 8000804:	1ad2      	subs	r2, r2, r3
 8000806:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fdf3 	bl	80003f8 <Lcd_int>
		  Lcd_string(&lcd, ".");
 8000812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000816:	4937      	ldr	r1, [pc, #220]	; (80008f4 <main+0x320>)
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fe05 	bl	8000428 <Lcd_string>
		  if (m%100 < 10){
 800081e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000820:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <main+0x31c>)
 8000822:	fb83 1302 	smull	r1, r3, r3, r2
 8000826:	1159      	asrs	r1, r3, #5
 8000828:	17d3      	asrs	r3, r2, #31
 800082a:	1acb      	subs	r3, r1, r3
 800082c:	2164      	movs	r1, #100	; 0x64
 800082e:	fb01 f303 	mul.w	r3, r1, r3
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	2b09      	cmp	r3, #9
 8000836:	dc13      	bgt.n	8000860 <main+0x28c>
			  Lcd_cursor(&lcd, 0, TENTHS);
 8000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083c:	2209      	movs	r2, #9
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fe11 	bl	8000468 <Lcd_cursor>
			  Lcd_int(&lcd, 0);
 8000846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fdd3 	bl	80003f8 <Lcd_int>
			  Lcd_cursor(&lcd, 0, HUNDREDTHS);
 8000852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000856:	220a      	movs	r2, #10
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fe04 	bl	8000468 <Lcd_cursor>
		  }
		  Lcd_int(&lcd, m%100);
 8000860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000862:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <main+0x31c>)
 8000864:	fb82 1203 	smull	r1, r2, r2, r3
 8000868:	1151      	asrs	r1, r2, #5
 800086a:	17da      	asrs	r2, r3, #31
 800086c:	1a8a      	subs	r2, r1, r2
 800086e:	2164      	movs	r1, #100	; 0x64
 8000870:	fb01 f202 	mul.w	r2, r1, r2
 8000874:	1a9a      	subs	r2, r3, r2
 8000876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fdbb 	bl	80003f8 <Lcd_int>
 8000882:	e022      	b.n	80008ca <main+0x2f6>
	  } else if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == GPIO_PIN_SET){
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	481b      	ldr	r0, [pc, #108]	; (80008f8 <main+0x324>)
 800088a:	f000 fc77 	bl	800117c <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d01a      	beq.n	80008ca <main+0x2f6>

	  } else if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == GPIO_PIN_SET){
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <main+0x324>)
 8000898:	f000 fc70 	bl	800117c <HAL_GPIO_ReadPin>
 800089c:	4603      	mov	r3, r0
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d013      	beq.n	80008ca <main+0x2f6>

	  } else if (HAL_GPIO_ReadPin(BUTTON_ENTER_GPIO_Port, BUTTON_ENTER_Pin) == GPIO_PIN_SET){
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <main+0x310>)
 80008a8:	f000 fc68 	bl	800117c <HAL_GPIO_ReadPin>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d10b      	bne.n	80008ca <main+0x2f6>
		  isEnterPressed = true;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		  while(HAL_GPIO_ReadPin(BUTTON_ENTER_GPIO_Port, BUTTON_ENTER_Pin) == GPIO_PIN_SET)
 80008b8:	bf00      	nop
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <main+0x310>)
 80008c0:	f000 fc5c 	bl	800117c <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d0f7      	beq.n	80008ba <main+0x2e6>
  while (isEnterPressed == false)
 80008ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008ce:	f083 0301 	eor.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	f47f af17 	bne.w	8000708 <main+0x134>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008da:	e7fe      	b.n	80008da <main+0x306>
 80008dc:	08002794 	.word	0x08002794
 80008e0:	080027a4 	.word	0x080027a4
 80008e4:	48000400 	.word	0x48000400
 80008e8:	080027ac 	.word	0x080027ac
 80008ec:	080027b4 	.word	0x080027b4
 80008f0:	51eb851f 	.word	0x51eb851f
 80008f4:	08002790 	.word	0x08002790
 80008f8:	48000800 	.word	0x48000800

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b096      	sub	sp, #88	; 0x58
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2244      	movs	r2, #68	; 0x44
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fabc 	bl	8001e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000922:	f000 fc69 	bl	80011f8 <HAL_PWREx_ControlVoltageScaling>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800092c:	f000 f838 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000930:	2310      	movs	r3, #16
 8000932:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800093c:	2360      	movs	r3, #96	; 0x60
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000944:	2301      	movs	r3, #1
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800094c:	2328      	movs	r3, #40	; 0x28
 800094e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000950:	2307      	movs	r3, #7
 8000952:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fc9f 	bl	80012a4 <HAL_RCC_OscConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800096c:	f000 f818 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000970:	230f      	movs	r3, #15
 8000972:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2303      	movs	r3, #3
 8000976:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	2104      	movs	r1, #4
 8000988:	4618      	mov	r0, r3
 800098a:	f001 f867 	bl	8001a5c <HAL_RCC_ClockConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000994:	f000 f804 	bl	80009a0 <Error_Handler>
  }
}
 8000998:	bf00      	nop
 800099a:	3758      	adds	r7, #88	; 0x58
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f8c8 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f001 f9dc 	bl	8001e34 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20018000 	.word	0x20018000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	200000a8 	.word	0x200000a8

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 f99b 	bl	8001e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b0a:	f7ff fd63 	bl	80005d4 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b1c:	0800283c 	.word	0x0800283c
  ldr r2, =_sbss
 8000b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b24:	200000a4 	.word	0x200000a4

08000b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_2_IRQHandler>

08000b2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f943 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3a:	200f      	movs	r0, #15
 8000b3c:	f000 f80e 	bl	8000b5c <HAL_InitTick>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	71fb      	strb	r3, [r7, #7]
 8000b4a:	e001      	b.n	8000b50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4c:	f7ff ff2e 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b50:	79fb      	ldrb	r3, [r7, #7]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d023      	beq.n	8000bb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_InitTick+0x70>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_InitTick+0x6c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f941 	bl	8000e0e <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10f      	bne.n	8000bb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d809      	bhi.n	8000bac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 f919 	bl	8000dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_InitTick+0x74>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e007      	b.n	8000bbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e004      	b.n	8000bbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	e001      	b.n	8000bbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000090 	.word	0x20000090

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000090 	.word	0x20000090

08000c14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c1c:	f7ff ffee 	bl	8000bfc <HAL_GetTick>
 8000c20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2c:	d005      	beq.n	8000c3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Delay+0x44>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3a:	bf00      	nop
 8000c3c:	f7ff ffde 	bl	8000bfc <HAL_GetTick>
 8000c40:	4602      	mov	r2, r0
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d8f7      	bhi.n	8000c3c <HAL_Delay+0x28>
  {
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff47 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff5c 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ffb0 	bl	8000d7c <SysTick_Config>
 8000e1c:	4603      	mov	r3, r0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	e17f      	b.n	8001138 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8171 	beq.w	8001132 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d005      	beq.n	8000e68 <HAL_GPIO_Init+0x40>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d130      	bne.n	8000eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	f003 0201 	and.w	r2, r3, #1
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d118      	bne.n	8000f08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000edc:	2201      	movs	r2, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	f003 0201 	and.w	r2, r3, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d017      	beq.n	8000f44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	6939      	ldr	r1, [r7, #16]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80ac 	beq.w	8001132 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b5f      	ldr	r3, [pc, #380]	; (8001158 <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	4a5e      	ldr	r2, [pc, #376]	; (8001158 <HAL_GPIO_Init+0x330>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <HAL_GPIO_Init+0x330>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_GPIO_Init+0x334>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101c:	d025      	beq.n	800106a <HAL_GPIO_Init+0x242>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4f      	ldr	r2, [pc, #316]	; (8001160 <HAL_GPIO_Init+0x338>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01f      	beq.n	8001066 <HAL_GPIO_Init+0x23e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4e      	ldr	r2, [pc, #312]	; (8001164 <HAL_GPIO_Init+0x33c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d019      	beq.n	8001062 <HAL_GPIO_Init+0x23a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4d      	ldr	r2, [pc, #308]	; (8001168 <HAL_GPIO_Init+0x340>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d013      	beq.n	800105e <HAL_GPIO_Init+0x236>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x344>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d00d      	beq.n	800105a <HAL_GPIO_Init+0x232>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x348>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d007      	beq.n	8001056 <HAL_GPIO_Init+0x22e>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x34c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_GPIO_Init+0x22a>
 800104e:	2306      	movs	r3, #6
 8001050:	e00c      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001052:	2307      	movs	r3, #7
 8001054:	e00a      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001056:	2305      	movs	r3, #5
 8001058:	e008      	b.n	800106c <HAL_GPIO_Init+0x244>
 800105a:	2304      	movs	r3, #4
 800105c:	e006      	b.n	800106c <HAL_GPIO_Init+0x244>
 800105e:	2303      	movs	r3, #3
 8001060:	e004      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001062:	2302      	movs	r3, #2
 8001064:	e002      	b.n	800106c <HAL_GPIO_Init+0x244>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x244>
 800106a:	2300      	movs	r3, #0
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	f002 0203 	and.w	r2, r2, #3
 8001072:	0092      	lsls	r2, r2, #2
 8001074:	4093      	lsls	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800107c:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_GPIO_Init+0x334>)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108a:	4b3b      	ldr	r3, [pc, #236]	; (8001178 <HAL_GPIO_Init+0x350>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	43db      	mvns	r3, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ae:	4a32      	ldr	r2, [pc, #200]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010d8:	4a27      	ldr	r2, [pc, #156]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010de:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_GPIO_Init+0x350>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001102:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <HAL_GPIO_Init+0x350>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_GPIO_Init+0x350>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_GPIO_Init+0x350>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa22 f303 	lsr.w	r3, r2, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	f47f ae78 	bne.w	8000e38 <HAL_GPIO_Init+0x10>
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	371c      	adds	r7, #28
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48001000 	.word	0x48001000
 8001170:	48001400 	.word	0x48001400
 8001174:	48001800 	.word	0x48001800
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e001      	b.n	800119e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011bc:	787b      	ldrb	r3, [r7, #1]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c2:	887a      	ldrh	r2, [r7, #2]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000

080011f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001206:	d130      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001208:	4b23      	ldr	r3, [pc, #140]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001214:	d038      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001226:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2232      	movs	r2, #50	; 0x32
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	3301      	adds	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	e002      	b.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b01      	subs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800124c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001250:	d102      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f2      	bne.n	800123e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d110      	bne.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e00f      	b.n	800128a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001276:	d007      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001280:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e3ca      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4b97      	ldr	r3, [pc, #604]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c0:	4b94      	ldr	r3, [pc, #592]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80e4 	beq.w	80014a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_RCC_OscConfig+0x4a>
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	f040 808b 	bne.w	80013fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	f040 8087 	bne.w	80013fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ee:	4b89      	ldr	r3, [pc, #548]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_RCC_OscConfig+0x62>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e3a2      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	4b82      	ldr	r3, [pc, #520]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <HAL_RCC_OscConfig+0x7c>
 8001316:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800131e:	e005      	b.n	800132c <HAL_RCC_OscConfig+0x88>
 8001320:	4b7c      	ldr	r3, [pc, #496]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800132c:	4293      	cmp	r3, r2
 800132e:	d223      	bcs.n	8001378 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 fd1d 	bl	8001d74 <RCC_SetFlashLatencyFromMSIRange>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e383      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001344:	4b73      	ldr	r3, [pc, #460]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a72      	ldr	r2, [pc, #456]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b70      	ldr	r3, [pc, #448]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	496d      	ldr	r1, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4b6c      	ldr	r3, [pc, #432]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	4968      	ldr	r1, [pc, #416]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
 8001376:	e025      	b.n	80013c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001378:	4b66      	ldr	r3, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a65      	ldr	r2, [pc, #404]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b63      	ldr	r3, [pc, #396]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4960      	ldr	r1, [pc, #384]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001396:	4b5f      	ldr	r3, [pc, #380]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	495b      	ldr	r1, [pc, #364]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fcdd 	bl	8001d74 <RCC_SetFlashLatencyFromMSIRange>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e343      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c4:	f000 fc4a 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	4950      	ldr	r1, [pc, #320]	; (8001518 <HAL_RCC_OscConfig+0x274>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	4a4e      	ldr	r2, [pc, #312]	; (800151c <HAL_RCC_OscConfig+0x278>)
 80013e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e4:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <HAL_RCC_OscConfig+0x27c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fbb7 	bl	8000b5c <HAL_InitTick>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d052      	beq.n	800149e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	e327      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d032      	beq.n	800146a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a42      	ldr	r2, [pc, #264]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001410:	f7ff fbf4 	bl	8000bfc <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001418:	f7ff fbf0 	bl	8000bfc <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e310      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a36      	ldr	r2, [pc, #216]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4931      	ldr	r1, [pc, #196]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	492c      	ldr	r1, [pc, #176]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	e01a      	b.n	80014a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001476:	f7ff fbc1 	bl	8000bfc <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147e:	f7ff fbbd 	bl	8000bfc <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e2dd      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x1da>
 800149c:	e000      	b.n	80014a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d074      	beq.n	8001596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x21a>
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b0c      	cmp	r3, #12
 80014b6:	d10e      	bne.n	80014d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d10b      	bne.n	80014d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d064      	beq.n	8001594 <HAL_RCC_OscConfig+0x2f0>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d160      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e2ba      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x24a>
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e026      	b.n	800153c <HAL_RCC_OscConfig+0x298>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f6:	d115      	bne.n	8001524 <HAL_RCC_OscConfig+0x280>
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a05      	ldr	r2, [pc, #20]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a02      	ldr	r2, [pc, #8]	; (8001514 <HAL_RCC_OscConfig+0x270>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e014      	b.n	800153c <HAL_RCC_OscConfig+0x298>
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	080027c0 	.word	0x080027c0
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004
 8001524:	4ba0      	ldr	r3, [pc, #640]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a9f      	ldr	r2, [pc, #636]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b9d      	ldr	r3, [pc, #628]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a9c      	ldr	r2, [pc, #624]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb5a 	bl	8000bfc <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fb56 	bl	8000bfc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e276      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x2a8>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb46 	bl	8000bfc <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fb42 	bl	8000bfc <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e262      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x2d0>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d060      	beq.n	8001664 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x310>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d119      	bne.n	80015e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d116      	bne.n	80015e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x328>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e23f      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b76      	ldr	r3, [pc, #472]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	4973      	ldr	r1, [pc, #460]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	e040      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d023      	beq.n	8001632 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ea:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb01 	bl	8000bfc <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fafd 	bl	8000bfc <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e21d      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b62      	ldr	r3, [pc, #392]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	495f      	ldr	r1, [pc, #380]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e018      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b5d      	ldr	r3, [pc, #372]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a5c      	ldr	r2, [pc, #368]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fadd 	bl	8000bfc <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fad9 	bl	8000bfc <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1f9      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03c      	beq.n	80016ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001678:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	4a4a      	ldr	r2, [pc, #296]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fab8 	bl	8000bfc <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fab4 	bl	8000bfc <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e1d4      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ef      	beq.n	8001690 <HAL_RCC_OscConfig+0x3ec>
 80016b0:	e01b      	b.n	80016ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b8:	4a3b      	ldr	r2, [pc, #236]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff fa9b 	bl	8000bfc <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fa97 	bl	8000bfc <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1b7      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ef      	bne.n	80016ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80a6 	beq.w	8001844 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	; 0x58
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001720:	2301      	movs	r3, #1
 8001722:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_RCC_OscConfig+0x508>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d118      	bne.n	8001762 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_OscConfig+0x508>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x508>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173c:	f7ff fa5e 	bl	8000bfc <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff fa5a 	bl	8000bfc <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e17a      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_RCC_OscConfig+0x508>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x4d8>
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177a:	e029      	b.n	80017d0 <HAL_RCC_OscConfig+0x52c>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d115      	bne.n	80017b0 <HAL_RCC_OscConfig+0x50c>
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_RCC_OscConfig+0x504>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x52c>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
 80017b0:	4b9c      	ldr	r3, [pc, #624]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a9b      	ldr	r2, [pc, #620]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c0:	4b98      	ldr	r3, [pc, #608]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	4a97      	ldr	r2, [pc, #604]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d016      	beq.n	8001806 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa10 	bl	8000bfc <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fa0c 	bl	8000bfc <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e12a      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ed      	beq.n	80017e0 <HAL_RCC_OscConfig+0x53c>
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff f9f9 	bl	8000bfc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f9f5 	bl	8000bfc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e113      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001824:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ed      	bne.n	800180e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b7a      	ldr	r3, [pc, #488]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	4a79      	ldr	r2, [pc, #484]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001842:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80fe 	beq.w	8001a4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	2b02      	cmp	r3, #2
 8001854:	f040 80d0 	bne.w	80019f8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001858:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	d130      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	3b01      	subs	r3, #1
 8001878:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	429a      	cmp	r2, r3
 800187c:	d127      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800188a:	429a      	cmp	r2, r3
 800188c:	d11f      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001898:	2a07      	cmp	r2, #7
 800189a:	bf14      	ite	ne
 800189c:	2201      	movne	r2, #1
 800189e:	2200      	moveq	r2, #0
 80018a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d113      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d06e      	beq.n	80019ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d069      	beq.n	80019a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0ad      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018fc:	f7ff f97e 	bl	8000bfc <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f97a 	bl	8000bfc <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e09a      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001922:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <HAL_RCC_OscConfig+0x784>)
 8001928:	4013      	ands	r3, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001932:	3a01      	subs	r2, #1
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	4311      	orrs	r1, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800193c:	0212      	lsls	r2, r2, #8
 800193e:	4311      	orrs	r1, r2
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	3a01      	subs	r2, #1
 8001948:	0552      	lsls	r2, r2, #21
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001950:	0852      	lsrs	r2, r2, #1
 8001952:	3a01      	subs	r2, #1
 8001954:	0652      	lsls	r2, r2, #25
 8001956:	4311      	orrs	r1, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800195c:	0912      	lsrs	r2, r2, #4
 800195e:	0452      	lsls	r2, r2, #17
 8001960:	430a      	orrs	r2, r1
 8001962:	4930      	ldr	r1, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001964:	4313      	orrs	r3, r2
 8001966:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2d      	ldr	r2, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001980:	f7ff f93c 	bl	8000bfc <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff f938 	bl	8000bfc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e058      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a6:	e050      	b.n	8001a4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04f      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d148      	bne.n	8001a4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80019be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d0:	f7ff f914 	bl	8000bfc <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f910 	bl	8000bfc <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e030      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x734>
 80019f6:	e028      	b.n	8001a4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d023      	beq.n	8001a46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_RCC_OscConfig+0x780>)
 8001a04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f8f7 	bl	8000bfc <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	e00c      	b.n	8001a2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f8f3 	bl	8000bfc <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d905      	bls.n	8001a2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e013      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
 8001a24:	40021000 	.word	0x40021000
 8001a28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_OscConfig+0x7b0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1ec      	bne.n	8001a12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_OscConfig+0x7b0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4905      	ldr	r1, [pc, #20]	; (8001a54 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_RCC_OscConfig+0x7b4>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e001      	b.n	8001a4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	feeefffc 	.word	0xfeeefffc

08001a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0e7      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a70:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d910      	bls.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 0207 	bic.w	r2, r3, #7
 8001a86:	4970      	ldr	r1, [pc, #448]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8e:	4b6e      	ldr	r3, [pc, #440]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0cf      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d010      	beq.n	8001ace <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d908      	bls.n	8001ace <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001abc:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4960      	ldr	r1, [pc, #384]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d04c      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d121      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0a6      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d115      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e09a      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b12:	4b4e      	ldr	r3, [pc, #312]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e08e      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b22:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e086      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 0203 	bic.w	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4943      	ldr	r1, [pc, #268]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b44:	f7ff f85a 	bl	8000bfc <HAL_GetTick>
 8001b48:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff f856 	bl	8000bfc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e06e      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 020c 	and.w	r2, r3, #12
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d1eb      	bne.n	8001b4c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d208      	bcs.n	8001ba2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	492b      	ldr	r1, [pc, #172]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba2:	4b29      	ldr	r3, [pc, #164]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d210      	bcs.n	8001bd2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 0207 	bic.w	r2, r3, #7
 8001bb8:	4923      	ldr	r1, [pc, #140]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e036      	b.n	8001c40 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4918      	ldr	r1, [pc, #96]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4910      	ldr	r1, [pc, #64]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c10:	f000 f824 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_ClockConfig+0x1f0>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	490b      	ldr	r1, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1f4>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2c:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1fc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe ff91 	bl	8000b5c <HAL_InitTick>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	080027c0 	.word	0x080027c0
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6a:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c74:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x34>
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d121      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d11e      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cb8:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d102      	bne.n	8001cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e004      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d134      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d003      	beq.n	8001d02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d003      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0xac>
 8001d00:	e005      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d04:	617b      	str	r3, [r7, #20]
      break;
 8001d06:	e005      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0a:	617b      	str	r3, [r7, #20]
      break;
 8001d0c:	e002      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	617b      	str	r3, [r7, #20]
      break;
 8001d12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	3301      	adds	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	fb03 f202 	mul.w	r2, r3, r2
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	0e5b      	lsrs	r3, r3, #25
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	3301      	adds	r3, #1
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d54:	69bb      	ldr	r3, [r7, #24]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	080027d0 	.word	0x080027d0
 8001d6c:	00f42400 	.word	0x00f42400
 8001d70:	007a1200 	.word	0x007a1200

08001d74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d8c:	f7ff fa26 	bl	80011dc <HAL_PWREx_GetVoltageRange>
 8001d90:	6178      	str	r0, [r7, #20]
 8001d92:	e014      	b.n	8001dbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dac:	f7ff fa16 	bl	80011dc <HAL_PWREx_GetVoltageRange>
 8001db0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc4:	d10b      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d919      	bls.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2ba0      	cmp	r3, #160	; 0xa0
 8001dd0:	d902      	bls.n	8001dd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e013      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e010      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d902      	bls.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de4:	2303      	movs	r3, #3
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e00a      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	d102      	bne.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df0:	2302      	movs	r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e004      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b70      	cmp	r3, #112	; 0x70
 8001dfa:	d101      	bne.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0207 	bic.w	r2, r3, #7
 8001e08:	4909      	ldr	r1, [pc, #36]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40022000 	.word	0x40022000

08001e34 <__errno>:
 8001e34:	4b01      	ldr	r3, [pc, #4]	; (8001e3c <__errno+0x8>)
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000000c 	.word	0x2000000c

08001e40 <__libc_init_array>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	4d0d      	ldr	r5, [pc, #52]	; (8001e78 <__libc_init_array+0x38>)
 8001e44:	4c0d      	ldr	r4, [pc, #52]	; (8001e7c <__libc_init_array+0x3c>)
 8001e46:	1b64      	subs	r4, r4, r5
 8001e48:	10a4      	asrs	r4, r4, #2
 8001e4a:	2600      	movs	r6, #0
 8001e4c:	42a6      	cmp	r6, r4
 8001e4e:	d109      	bne.n	8001e64 <__libc_init_array+0x24>
 8001e50:	4d0b      	ldr	r5, [pc, #44]	; (8001e80 <__libc_init_array+0x40>)
 8001e52:	4c0c      	ldr	r4, [pc, #48]	; (8001e84 <__libc_init_array+0x44>)
 8001e54:	f000 fc8e 	bl	8002774 <_init>
 8001e58:	1b64      	subs	r4, r4, r5
 8001e5a:	10a4      	asrs	r4, r4, #2
 8001e5c:	2600      	movs	r6, #0
 8001e5e:	42a6      	cmp	r6, r4
 8001e60:	d105      	bne.n	8001e6e <__libc_init_array+0x2e>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e68:	4798      	blx	r3
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	e7ee      	b.n	8001e4c <__libc_init_array+0xc>
 8001e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e72:	4798      	blx	r3
 8001e74:	3601      	adds	r6, #1
 8001e76:	e7f2      	b.n	8001e5e <__libc_init_array+0x1e>
 8001e78:	08002834 	.word	0x08002834
 8001e7c:	08002834 	.word	0x08002834
 8001e80:	08002834 	.word	0x08002834
 8001e84:	08002838 	.word	0x08002838

08001e88 <memset>:
 8001e88:	4402      	add	r2, r0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d100      	bne.n	8001e92 <memset+0xa>
 8001e90:	4770      	bx	lr
 8001e92:	f803 1b01 	strb.w	r1, [r3], #1
 8001e96:	e7f9      	b.n	8001e8c <memset+0x4>

08001e98 <siprintf>:
 8001e98:	b40e      	push	{r1, r2, r3}
 8001e9a:	b500      	push	{lr}
 8001e9c:	b09c      	sub	sp, #112	; 0x70
 8001e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8001ea0:	9002      	str	r0, [sp, #8]
 8001ea2:	9006      	str	r0, [sp, #24]
 8001ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ea8:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <siprintf+0x38>)
 8001eaa:	9107      	str	r1, [sp, #28]
 8001eac:	9104      	str	r1, [sp, #16]
 8001eae:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <siprintf+0x3c>)
 8001eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001eb4:	9105      	str	r1, [sp, #20]
 8001eb6:	6800      	ldr	r0, [r0, #0]
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	a902      	add	r1, sp, #8
 8001ebc:	f000 f868 	bl	8001f90 <_svfiprintf_r>
 8001ec0:	9b02      	ldr	r3, [sp, #8]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	b01c      	add	sp, #112	; 0x70
 8001ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ecc:	b003      	add	sp, #12
 8001ece:	4770      	bx	lr
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	ffff0208 	.word	0xffff0208

08001ed8 <__ssputs_r>:
 8001ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001edc:	688e      	ldr	r6, [r1, #8]
 8001ede:	429e      	cmp	r6, r3
 8001ee0:	4682      	mov	sl, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	4690      	mov	r8, r2
 8001ee6:	461f      	mov	r7, r3
 8001ee8:	d838      	bhi.n	8001f5c <__ssputs_r+0x84>
 8001eea:	898a      	ldrh	r2, [r1, #12]
 8001eec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ef0:	d032      	beq.n	8001f58 <__ssputs_r+0x80>
 8001ef2:	6825      	ldr	r5, [r4, #0]
 8001ef4:	6909      	ldr	r1, [r1, #16]
 8001ef6:	eba5 0901 	sub.w	r9, r5, r1
 8001efa:	6965      	ldr	r5, [r4, #20]
 8001efc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f04:	3301      	adds	r3, #1
 8001f06:	444b      	add	r3, r9
 8001f08:	106d      	asrs	r5, r5, #1
 8001f0a:	429d      	cmp	r5, r3
 8001f0c:	bf38      	it	cc
 8001f0e:	461d      	movcc	r5, r3
 8001f10:	0553      	lsls	r3, r2, #21
 8001f12:	d531      	bpl.n	8001f78 <__ssputs_r+0xa0>
 8001f14:	4629      	mov	r1, r5
 8001f16:	f000 fb63 	bl	80025e0 <_malloc_r>
 8001f1a:	4606      	mov	r6, r0
 8001f1c:	b950      	cbnz	r0, 8001f34 <__ssputs_r+0x5c>
 8001f1e:	230c      	movs	r3, #12
 8001f20:	f8ca 3000 	str.w	r3, [sl]
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2a:	81a3      	strh	r3, [r4, #12]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f34:	6921      	ldr	r1, [r4, #16]
 8001f36:	464a      	mov	r2, r9
 8001f38:	f000 fabe 	bl	80024b8 <memcpy>
 8001f3c:	89a3      	ldrh	r3, [r4, #12]
 8001f3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f46:	81a3      	strh	r3, [r4, #12]
 8001f48:	6126      	str	r6, [r4, #16]
 8001f4a:	6165      	str	r5, [r4, #20]
 8001f4c:	444e      	add	r6, r9
 8001f4e:	eba5 0509 	sub.w	r5, r5, r9
 8001f52:	6026      	str	r6, [r4, #0]
 8001f54:	60a5      	str	r5, [r4, #8]
 8001f56:	463e      	mov	r6, r7
 8001f58:	42be      	cmp	r6, r7
 8001f5a:	d900      	bls.n	8001f5e <__ssputs_r+0x86>
 8001f5c:	463e      	mov	r6, r7
 8001f5e:	6820      	ldr	r0, [r4, #0]
 8001f60:	4632      	mov	r2, r6
 8001f62:	4641      	mov	r1, r8
 8001f64:	f000 fab6 	bl	80024d4 <memmove>
 8001f68:	68a3      	ldr	r3, [r4, #8]
 8001f6a:	1b9b      	subs	r3, r3, r6
 8001f6c:	60a3      	str	r3, [r4, #8]
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	4433      	add	r3, r6
 8001f72:	6023      	str	r3, [r4, #0]
 8001f74:	2000      	movs	r0, #0
 8001f76:	e7db      	b.n	8001f30 <__ssputs_r+0x58>
 8001f78:	462a      	mov	r2, r5
 8001f7a:	f000 fba5 	bl	80026c8 <_realloc_r>
 8001f7e:	4606      	mov	r6, r0
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1e1      	bne.n	8001f48 <__ssputs_r+0x70>
 8001f84:	6921      	ldr	r1, [r4, #16]
 8001f86:	4650      	mov	r0, sl
 8001f88:	f000 fabe 	bl	8002508 <_free_r>
 8001f8c:	e7c7      	b.n	8001f1e <__ssputs_r+0x46>
	...

08001f90 <_svfiprintf_r>:
 8001f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f94:	4698      	mov	r8, r3
 8001f96:	898b      	ldrh	r3, [r1, #12]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	b09d      	sub	sp, #116	; 0x74
 8001f9c:	4607      	mov	r7, r0
 8001f9e:	460d      	mov	r5, r1
 8001fa0:	4614      	mov	r4, r2
 8001fa2:	d50e      	bpl.n	8001fc2 <_svfiprintf_r+0x32>
 8001fa4:	690b      	ldr	r3, [r1, #16]
 8001fa6:	b963      	cbnz	r3, 8001fc2 <_svfiprintf_r+0x32>
 8001fa8:	2140      	movs	r1, #64	; 0x40
 8001faa:	f000 fb19 	bl	80025e0 <_malloc_r>
 8001fae:	6028      	str	r0, [r5, #0]
 8001fb0:	6128      	str	r0, [r5, #16]
 8001fb2:	b920      	cbnz	r0, 8001fbe <_svfiprintf_r+0x2e>
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	e0d1      	b.n	8002162 <_svfiprintf_r+0x1d2>
 8001fbe:	2340      	movs	r3, #64	; 0x40
 8001fc0:	616b      	str	r3, [r5, #20]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8001fd0:	2330      	movs	r3, #48	; 0x30
 8001fd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800217c <_svfiprintf_r+0x1ec>
 8001fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fda:	f04f 0901 	mov.w	r9, #1
 8001fde:	4623      	mov	r3, r4
 8001fe0:	469a      	mov	sl, r3
 8001fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001fe6:	b10a      	cbz	r2, 8001fec <_svfiprintf_r+0x5c>
 8001fe8:	2a25      	cmp	r2, #37	; 0x25
 8001fea:	d1f9      	bne.n	8001fe0 <_svfiprintf_r+0x50>
 8001fec:	ebba 0b04 	subs.w	fp, sl, r4
 8001ff0:	d00b      	beq.n	800200a <_svfiprintf_r+0x7a>
 8001ff2:	465b      	mov	r3, fp
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	4638      	mov	r0, r7
 8001ffa:	f7ff ff6d 	bl	8001ed8 <__ssputs_r>
 8001ffe:	3001      	adds	r0, #1
 8002000:	f000 80aa 	beq.w	8002158 <_svfiprintf_r+0x1c8>
 8002004:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002006:	445a      	add	r2, fp
 8002008:	9209      	str	r2, [sp, #36]	; 0x24
 800200a:	f89a 3000 	ldrb.w	r3, [sl]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80a2 	beq.w	8002158 <_svfiprintf_r+0x1c8>
 8002014:	2300      	movs	r3, #0
 8002016:	f04f 32ff 	mov.w	r2, #4294967295
 800201a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800201e:	f10a 0a01 	add.w	sl, sl, #1
 8002022:	9304      	str	r3, [sp, #16]
 8002024:	9307      	str	r3, [sp, #28]
 8002026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800202a:	931a      	str	r3, [sp, #104]	; 0x68
 800202c:	4654      	mov	r4, sl
 800202e:	2205      	movs	r2, #5
 8002030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002034:	4851      	ldr	r0, [pc, #324]	; (800217c <_svfiprintf_r+0x1ec>)
 8002036:	f7fe f8d3 	bl	80001e0 <memchr>
 800203a:	9a04      	ldr	r2, [sp, #16]
 800203c:	b9d8      	cbnz	r0, 8002076 <_svfiprintf_r+0xe6>
 800203e:	06d0      	lsls	r0, r2, #27
 8002040:	bf44      	itt	mi
 8002042:	2320      	movmi	r3, #32
 8002044:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002048:	0711      	lsls	r1, r2, #28
 800204a:	bf44      	itt	mi
 800204c:	232b      	movmi	r3, #43	; 0x2b
 800204e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002052:	f89a 3000 	ldrb.w	r3, [sl]
 8002056:	2b2a      	cmp	r3, #42	; 0x2a
 8002058:	d015      	beq.n	8002086 <_svfiprintf_r+0xf6>
 800205a:	9a07      	ldr	r2, [sp, #28]
 800205c:	4654      	mov	r4, sl
 800205e:	2000      	movs	r0, #0
 8002060:	f04f 0c0a 	mov.w	ip, #10
 8002064:	4621      	mov	r1, r4
 8002066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800206a:	3b30      	subs	r3, #48	; 0x30
 800206c:	2b09      	cmp	r3, #9
 800206e:	d94e      	bls.n	800210e <_svfiprintf_r+0x17e>
 8002070:	b1b0      	cbz	r0, 80020a0 <_svfiprintf_r+0x110>
 8002072:	9207      	str	r2, [sp, #28]
 8002074:	e014      	b.n	80020a0 <_svfiprintf_r+0x110>
 8002076:	eba0 0308 	sub.w	r3, r0, r8
 800207a:	fa09 f303 	lsl.w	r3, r9, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	9304      	str	r3, [sp, #16]
 8002082:	46a2      	mov	sl, r4
 8002084:	e7d2      	b.n	800202c <_svfiprintf_r+0x9c>
 8002086:	9b03      	ldr	r3, [sp, #12]
 8002088:	1d19      	adds	r1, r3, #4
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	9103      	str	r1, [sp, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	bfbb      	ittet	lt
 8002092:	425b      	neglt	r3, r3
 8002094:	f042 0202 	orrlt.w	r2, r2, #2
 8002098:	9307      	strge	r3, [sp, #28]
 800209a:	9307      	strlt	r3, [sp, #28]
 800209c:	bfb8      	it	lt
 800209e:	9204      	strlt	r2, [sp, #16]
 80020a0:	7823      	ldrb	r3, [r4, #0]
 80020a2:	2b2e      	cmp	r3, #46	; 0x2e
 80020a4:	d10c      	bne.n	80020c0 <_svfiprintf_r+0x130>
 80020a6:	7863      	ldrb	r3, [r4, #1]
 80020a8:	2b2a      	cmp	r3, #42	; 0x2a
 80020aa:	d135      	bne.n	8002118 <_svfiprintf_r+0x188>
 80020ac:	9b03      	ldr	r3, [sp, #12]
 80020ae:	1d1a      	adds	r2, r3, #4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	9203      	str	r2, [sp, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bfb8      	it	lt
 80020b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80020bc:	3402      	adds	r4, #2
 80020be:	9305      	str	r3, [sp, #20]
 80020c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800218c <_svfiprintf_r+0x1fc>
 80020c4:	7821      	ldrb	r1, [r4, #0]
 80020c6:	2203      	movs	r2, #3
 80020c8:	4650      	mov	r0, sl
 80020ca:	f7fe f889 	bl	80001e0 <memchr>
 80020ce:	b140      	cbz	r0, 80020e2 <_svfiprintf_r+0x152>
 80020d0:	2340      	movs	r3, #64	; 0x40
 80020d2:	eba0 000a 	sub.w	r0, r0, sl
 80020d6:	fa03 f000 	lsl.w	r0, r3, r0
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	4303      	orrs	r3, r0
 80020de:	3401      	adds	r4, #1
 80020e0:	9304      	str	r3, [sp, #16]
 80020e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020e6:	4826      	ldr	r0, [pc, #152]	; (8002180 <_svfiprintf_r+0x1f0>)
 80020e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020ec:	2206      	movs	r2, #6
 80020ee:	f7fe f877 	bl	80001e0 <memchr>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d038      	beq.n	8002168 <_svfiprintf_r+0x1d8>
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <_svfiprintf_r+0x1f4>)
 80020f8:	bb1b      	cbnz	r3, 8002142 <_svfiprintf_r+0x1b2>
 80020fa:	9b03      	ldr	r3, [sp, #12]
 80020fc:	3307      	adds	r3, #7
 80020fe:	f023 0307 	bic.w	r3, r3, #7
 8002102:	3308      	adds	r3, #8
 8002104:	9303      	str	r3, [sp, #12]
 8002106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002108:	4433      	add	r3, r6
 800210a:	9309      	str	r3, [sp, #36]	; 0x24
 800210c:	e767      	b.n	8001fde <_svfiprintf_r+0x4e>
 800210e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002112:	460c      	mov	r4, r1
 8002114:	2001      	movs	r0, #1
 8002116:	e7a5      	b.n	8002064 <_svfiprintf_r+0xd4>
 8002118:	2300      	movs	r3, #0
 800211a:	3401      	adds	r4, #1
 800211c:	9305      	str	r3, [sp, #20]
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 0c0a 	mov.w	ip, #10
 8002124:	4620      	mov	r0, r4
 8002126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800212a:	3a30      	subs	r2, #48	; 0x30
 800212c:	2a09      	cmp	r2, #9
 800212e:	d903      	bls.n	8002138 <_svfiprintf_r+0x1a8>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0c5      	beq.n	80020c0 <_svfiprintf_r+0x130>
 8002134:	9105      	str	r1, [sp, #20]
 8002136:	e7c3      	b.n	80020c0 <_svfiprintf_r+0x130>
 8002138:	fb0c 2101 	mla	r1, ip, r1, r2
 800213c:	4604      	mov	r4, r0
 800213e:	2301      	movs	r3, #1
 8002140:	e7f0      	b.n	8002124 <_svfiprintf_r+0x194>
 8002142:	ab03      	add	r3, sp, #12
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	462a      	mov	r2, r5
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <_svfiprintf_r+0x1f8>)
 800214a:	a904      	add	r1, sp, #16
 800214c:	4638      	mov	r0, r7
 800214e:	f3af 8000 	nop.w
 8002152:	1c42      	adds	r2, r0, #1
 8002154:	4606      	mov	r6, r0
 8002156:	d1d6      	bne.n	8002106 <_svfiprintf_r+0x176>
 8002158:	89ab      	ldrh	r3, [r5, #12]
 800215a:	065b      	lsls	r3, r3, #25
 800215c:	f53f af2c 	bmi.w	8001fb8 <_svfiprintf_r+0x28>
 8002160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002162:	b01d      	add	sp, #116	; 0x74
 8002164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002168:	ab03      	add	r3, sp, #12
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	462a      	mov	r2, r5
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <_svfiprintf_r+0x1f8>)
 8002170:	a904      	add	r1, sp, #16
 8002172:	4638      	mov	r0, r7
 8002174:	f000 f87a 	bl	800226c <_printf_i>
 8002178:	e7eb      	b.n	8002152 <_svfiprintf_r+0x1c2>
 800217a:	bf00      	nop
 800217c:	08002800 	.word	0x08002800
 8002180:	0800280a 	.word	0x0800280a
 8002184:	00000000 	.word	0x00000000
 8002188:	08001ed9 	.word	0x08001ed9
 800218c:	08002806 	.word	0x08002806

08002190 <_printf_common>:
 8002190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002194:	4616      	mov	r6, r2
 8002196:	4699      	mov	r9, r3
 8002198:	688a      	ldr	r2, [r1, #8]
 800219a:	690b      	ldr	r3, [r1, #16]
 800219c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	bfb8      	it	lt
 80021a4:	4613      	movlt	r3, r2
 80021a6:	6033      	str	r3, [r6, #0]
 80021a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021ac:	4607      	mov	r7, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	b10a      	cbz	r2, 80021b6 <_printf_common+0x26>
 80021b2:	3301      	adds	r3, #1
 80021b4:	6033      	str	r3, [r6, #0]
 80021b6:	6823      	ldr	r3, [r4, #0]
 80021b8:	0699      	lsls	r1, r3, #26
 80021ba:	bf42      	ittt	mi
 80021bc:	6833      	ldrmi	r3, [r6, #0]
 80021be:	3302      	addmi	r3, #2
 80021c0:	6033      	strmi	r3, [r6, #0]
 80021c2:	6825      	ldr	r5, [r4, #0]
 80021c4:	f015 0506 	ands.w	r5, r5, #6
 80021c8:	d106      	bne.n	80021d8 <_printf_common+0x48>
 80021ca:	f104 0a19 	add.w	sl, r4, #25
 80021ce:	68e3      	ldr	r3, [r4, #12]
 80021d0:	6832      	ldr	r2, [r6, #0]
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	42ab      	cmp	r3, r5
 80021d6:	dc26      	bgt.n	8002226 <_printf_common+0x96>
 80021d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80021dc:	1e13      	subs	r3, r2, #0
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	bf18      	it	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	0692      	lsls	r2, r2, #26
 80021e6:	d42b      	bmi.n	8002240 <_printf_common+0xb0>
 80021e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021ec:	4649      	mov	r1, r9
 80021ee:	4638      	mov	r0, r7
 80021f0:	47c0      	blx	r8
 80021f2:	3001      	adds	r0, #1
 80021f4:	d01e      	beq.n	8002234 <_printf_common+0xa4>
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	68e5      	ldr	r5, [r4, #12]
 80021fa:	6832      	ldr	r2, [r6, #0]
 80021fc:	f003 0306 	and.w	r3, r3, #6
 8002200:	2b04      	cmp	r3, #4
 8002202:	bf08      	it	eq
 8002204:	1aad      	subeq	r5, r5, r2
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	6922      	ldr	r2, [r4, #16]
 800220a:	bf0c      	ite	eq
 800220c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002210:	2500      	movne	r5, #0
 8002212:	4293      	cmp	r3, r2
 8002214:	bfc4      	itt	gt
 8002216:	1a9b      	subgt	r3, r3, r2
 8002218:	18ed      	addgt	r5, r5, r3
 800221a:	2600      	movs	r6, #0
 800221c:	341a      	adds	r4, #26
 800221e:	42b5      	cmp	r5, r6
 8002220:	d11a      	bne.n	8002258 <_printf_common+0xc8>
 8002222:	2000      	movs	r0, #0
 8002224:	e008      	b.n	8002238 <_printf_common+0xa8>
 8002226:	2301      	movs	r3, #1
 8002228:	4652      	mov	r2, sl
 800222a:	4649      	mov	r1, r9
 800222c:	4638      	mov	r0, r7
 800222e:	47c0      	blx	r8
 8002230:	3001      	adds	r0, #1
 8002232:	d103      	bne.n	800223c <_printf_common+0xac>
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800223c:	3501      	adds	r5, #1
 800223e:	e7c6      	b.n	80021ce <_printf_common+0x3e>
 8002240:	18e1      	adds	r1, r4, r3
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	2030      	movs	r0, #48	; 0x30
 8002246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800224a:	4422      	add	r2, r4
 800224c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002254:	3302      	adds	r3, #2
 8002256:	e7c7      	b.n	80021e8 <_printf_common+0x58>
 8002258:	2301      	movs	r3, #1
 800225a:	4622      	mov	r2, r4
 800225c:	4649      	mov	r1, r9
 800225e:	4638      	mov	r0, r7
 8002260:	47c0      	blx	r8
 8002262:	3001      	adds	r0, #1
 8002264:	d0e6      	beq.n	8002234 <_printf_common+0xa4>
 8002266:	3601      	adds	r6, #1
 8002268:	e7d9      	b.n	800221e <_printf_common+0x8e>
	...

0800226c <_printf_i>:
 800226c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002270:	7e0f      	ldrb	r7, [r1, #24]
 8002272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002274:	2f78      	cmp	r7, #120	; 0x78
 8002276:	4691      	mov	r9, r2
 8002278:	4680      	mov	r8, r0
 800227a:	460c      	mov	r4, r1
 800227c:	469a      	mov	sl, r3
 800227e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002282:	d807      	bhi.n	8002294 <_printf_i+0x28>
 8002284:	2f62      	cmp	r7, #98	; 0x62
 8002286:	d80a      	bhi.n	800229e <_printf_i+0x32>
 8002288:	2f00      	cmp	r7, #0
 800228a:	f000 80d8 	beq.w	800243e <_printf_i+0x1d2>
 800228e:	2f58      	cmp	r7, #88	; 0x58
 8002290:	f000 80a3 	beq.w	80023da <_printf_i+0x16e>
 8002294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800229c:	e03a      	b.n	8002314 <_printf_i+0xa8>
 800229e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022a2:	2b15      	cmp	r3, #21
 80022a4:	d8f6      	bhi.n	8002294 <_printf_i+0x28>
 80022a6:	a101      	add	r1, pc, #4	; (adr r1, 80022ac <_printf_i+0x40>)
 80022a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022ac:	08002305 	.word	0x08002305
 80022b0:	08002319 	.word	0x08002319
 80022b4:	08002295 	.word	0x08002295
 80022b8:	08002295 	.word	0x08002295
 80022bc:	08002295 	.word	0x08002295
 80022c0:	08002295 	.word	0x08002295
 80022c4:	08002319 	.word	0x08002319
 80022c8:	08002295 	.word	0x08002295
 80022cc:	08002295 	.word	0x08002295
 80022d0:	08002295 	.word	0x08002295
 80022d4:	08002295 	.word	0x08002295
 80022d8:	08002425 	.word	0x08002425
 80022dc:	08002349 	.word	0x08002349
 80022e0:	08002407 	.word	0x08002407
 80022e4:	08002295 	.word	0x08002295
 80022e8:	08002295 	.word	0x08002295
 80022ec:	08002447 	.word	0x08002447
 80022f0:	08002295 	.word	0x08002295
 80022f4:	08002349 	.word	0x08002349
 80022f8:	08002295 	.word	0x08002295
 80022fc:	08002295 	.word	0x08002295
 8002300:	0800240f 	.word	0x0800240f
 8002304:	682b      	ldr	r3, [r5, #0]
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	602a      	str	r2, [r5, #0]
 800230c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002314:	2301      	movs	r3, #1
 8002316:	e0a3      	b.n	8002460 <_printf_i+0x1f4>
 8002318:	6820      	ldr	r0, [r4, #0]
 800231a:	6829      	ldr	r1, [r5, #0]
 800231c:	0606      	lsls	r6, r0, #24
 800231e:	f101 0304 	add.w	r3, r1, #4
 8002322:	d50a      	bpl.n	800233a <_printf_i+0xce>
 8002324:	680e      	ldr	r6, [r1, #0]
 8002326:	602b      	str	r3, [r5, #0]
 8002328:	2e00      	cmp	r6, #0
 800232a:	da03      	bge.n	8002334 <_printf_i+0xc8>
 800232c:	232d      	movs	r3, #45	; 0x2d
 800232e:	4276      	negs	r6, r6
 8002330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002334:	485e      	ldr	r0, [pc, #376]	; (80024b0 <_printf_i+0x244>)
 8002336:	230a      	movs	r3, #10
 8002338:	e019      	b.n	800236e <_printf_i+0x102>
 800233a:	680e      	ldr	r6, [r1, #0]
 800233c:	602b      	str	r3, [r5, #0]
 800233e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002342:	bf18      	it	ne
 8002344:	b236      	sxthne	r6, r6
 8002346:	e7ef      	b.n	8002328 <_printf_i+0xbc>
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	6820      	ldr	r0, [r4, #0]
 800234c:	1d19      	adds	r1, r3, #4
 800234e:	6029      	str	r1, [r5, #0]
 8002350:	0601      	lsls	r1, r0, #24
 8002352:	d501      	bpl.n	8002358 <_printf_i+0xec>
 8002354:	681e      	ldr	r6, [r3, #0]
 8002356:	e002      	b.n	800235e <_printf_i+0xf2>
 8002358:	0646      	lsls	r6, r0, #25
 800235a:	d5fb      	bpl.n	8002354 <_printf_i+0xe8>
 800235c:	881e      	ldrh	r6, [r3, #0]
 800235e:	4854      	ldr	r0, [pc, #336]	; (80024b0 <_printf_i+0x244>)
 8002360:	2f6f      	cmp	r7, #111	; 0x6f
 8002362:	bf0c      	ite	eq
 8002364:	2308      	moveq	r3, #8
 8002366:	230a      	movne	r3, #10
 8002368:	2100      	movs	r1, #0
 800236a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800236e:	6865      	ldr	r5, [r4, #4]
 8002370:	60a5      	str	r5, [r4, #8]
 8002372:	2d00      	cmp	r5, #0
 8002374:	bfa2      	ittt	ge
 8002376:	6821      	ldrge	r1, [r4, #0]
 8002378:	f021 0104 	bicge.w	r1, r1, #4
 800237c:	6021      	strge	r1, [r4, #0]
 800237e:	b90e      	cbnz	r6, 8002384 <_printf_i+0x118>
 8002380:	2d00      	cmp	r5, #0
 8002382:	d04d      	beq.n	8002420 <_printf_i+0x1b4>
 8002384:	4615      	mov	r5, r2
 8002386:	fbb6 f1f3 	udiv	r1, r6, r3
 800238a:	fb03 6711 	mls	r7, r3, r1, r6
 800238e:	5dc7      	ldrb	r7, [r0, r7]
 8002390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002394:	4637      	mov	r7, r6
 8002396:	42bb      	cmp	r3, r7
 8002398:	460e      	mov	r6, r1
 800239a:	d9f4      	bls.n	8002386 <_printf_i+0x11a>
 800239c:	2b08      	cmp	r3, #8
 800239e:	d10b      	bne.n	80023b8 <_printf_i+0x14c>
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	07de      	lsls	r6, r3, #31
 80023a4:	d508      	bpl.n	80023b8 <_printf_i+0x14c>
 80023a6:	6923      	ldr	r3, [r4, #16]
 80023a8:	6861      	ldr	r1, [r4, #4]
 80023aa:	4299      	cmp	r1, r3
 80023ac:	bfde      	ittt	le
 80023ae:	2330      	movle	r3, #48	; 0x30
 80023b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023b8:	1b52      	subs	r2, r2, r5
 80023ba:	6122      	str	r2, [r4, #16]
 80023bc:	f8cd a000 	str.w	sl, [sp]
 80023c0:	464b      	mov	r3, r9
 80023c2:	aa03      	add	r2, sp, #12
 80023c4:	4621      	mov	r1, r4
 80023c6:	4640      	mov	r0, r8
 80023c8:	f7ff fee2 	bl	8002190 <_printf_common>
 80023cc:	3001      	adds	r0, #1
 80023ce:	d14c      	bne.n	800246a <_printf_i+0x1fe>
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	b004      	add	sp, #16
 80023d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023da:	4835      	ldr	r0, [pc, #212]	; (80024b0 <_printf_i+0x244>)
 80023dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80023e0:	6829      	ldr	r1, [r5, #0]
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80023e8:	6029      	str	r1, [r5, #0]
 80023ea:	061d      	lsls	r5, r3, #24
 80023ec:	d514      	bpl.n	8002418 <_printf_i+0x1ac>
 80023ee:	07df      	lsls	r7, r3, #31
 80023f0:	bf44      	itt	mi
 80023f2:	f043 0320 	orrmi.w	r3, r3, #32
 80023f6:	6023      	strmi	r3, [r4, #0]
 80023f8:	b91e      	cbnz	r6, 8002402 <_printf_i+0x196>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	f023 0320 	bic.w	r3, r3, #32
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	2310      	movs	r3, #16
 8002404:	e7b0      	b.n	8002368 <_printf_i+0xfc>
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	f043 0320 	orr.w	r3, r3, #32
 800240c:	6023      	str	r3, [r4, #0]
 800240e:	2378      	movs	r3, #120	; 0x78
 8002410:	4828      	ldr	r0, [pc, #160]	; (80024b4 <_printf_i+0x248>)
 8002412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002416:	e7e3      	b.n	80023e0 <_printf_i+0x174>
 8002418:	0659      	lsls	r1, r3, #25
 800241a:	bf48      	it	mi
 800241c:	b2b6      	uxthmi	r6, r6
 800241e:	e7e6      	b.n	80023ee <_printf_i+0x182>
 8002420:	4615      	mov	r5, r2
 8002422:	e7bb      	b.n	800239c <_printf_i+0x130>
 8002424:	682b      	ldr	r3, [r5, #0]
 8002426:	6826      	ldr	r6, [r4, #0]
 8002428:	6961      	ldr	r1, [r4, #20]
 800242a:	1d18      	adds	r0, r3, #4
 800242c:	6028      	str	r0, [r5, #0]
 800242e:	0635      	lsls	r5, r6, #24
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	d501      	bpl.n	8002438 <_printf_i+0x1cc>
 8002434:	6019      	str	r1, [r3, #0]
 8002436:	e002      	b.n	800243e <_printf_i+0x1d2>
 8002438:	0670      	lsls	r0, r6, #25
 800243a:	d5fb      	bpl.n	8002434 <_printf_i+0x1c8>
 800243c:	8019      	strh	r1, [r3, #0]
 800243e:	2300      	movs	r3, #0
 8002440:	6123      	str	r3, [r4, #16]
 8002442:	4615      	mov	r5, r2
 8002444:	e7ba      	b.n	80023bc <_printf_i+0x150>
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	1d1a      	adds	r2, r3, #4
 800244a:	602a      	str	r2, [r5, #0]
 800244c:	681d      	ldr	r5, [r3, #0]
 800244e:	6862      	ldr	r2, [r4, #4]
 8002450:	2100      	movs	r1, #0
 8002452:	4628      	mov	r0, r5
 8002454:	f7fd fec4 	bl	80001e0 <memchr>
 8002458:	b108      	cbz	r0, 800245e <_printf_i+0x1f2>
 800245a:	1b40      	subs	r0, r0, r5
 800245c:	6060      	str	r0, [r4, #4]
 800245e:	6863      	ldr	r3, [r4, #4]
 8002460:	6123      	str	r3, [r4, #16]
 8002462:	2300      	movs	r3, #0
 8002464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002468:	e7a8      	b.n	80023bc <_printf_i+0x150>
 800246a:	6923      	ldr	r3, [r4, #16]
 800246c:	462a      	mov	r2, r5
 800246e:	4649      	mov	r1, r9
 8002470:	4640      	mov	r0, r8
 8002472:	47d0      	blx	sl
 8002474:	3001      	adds	r0, #1
 8002476:	d0ab      	beq.n	80023d0 <_printf_i+0x164>
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	079b      	lsls	r3, r3, #30
 800247c:	d413      	bmi.n	80024a6 <_printf_i+0x23a>
 800247e:	68e0      	ldr	r0, [r4, #12]
 8002480:	9b03      	ldr	r3, [sp, #12]
 8002482:	4298      	cmp	r0, r3
 8002484:	bfb8      	it	lt
 8002486:	4618      	movlt	r0, r3
 8002488:	e7a4      	b.n	80023d4 <_printf_i+0x168>
 800248a:	2301      	movs	r3, #1
 800248c:	4632      	mov	r2, r6
 800248e:	4649      	mov	r1, r9
 8002490:	4640      	mov	r0, r8
 8002492:	47d0      	blx	sl
 8002494:	3001      	adds	r0, #1
 8002496:	d09b      	beq.n	80023d0 <_printf_i+0x164>
 8002498:	3501      	adds	r5, #1
 800249a:	68e3      	ldr	r3, [r4, #12]
 800249c:	9903      	ldr	r1, [sp, #12]
 800249e:	1a5b      	subs	r3, r3, r1
 80024a0:	42ab      	cmp	r3, r5
 80024a2:	dcf2      	bgt.n	800248a <_printf_i+0x21e>
 80024a4:	e7eb      	b.n	800247e <_printf_i+0x212>
 80024a6:	2500      	movs	r5, #0
 80024a8:	f104 0619 	add.w	r6, r4, #25
 80024ac:	e7f5      	b.n	800249a <_printf_i+0x22e>
 80024ae:	bf00      	nop
 80024b0:	08002811 	.word	0x08002811
 80024b4:	08002822 	.word	0x08002822

080024b8 <memcpy>:
 80024b8:	440a      	add	r2, r1
 80024ba:	4291      	cmp	r1, r2
 80024bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80024c0:	d100      	bne.n	80024c4 <memcpy+0xc>
 80024c2:	4770      	bx	lr
 80024c4:	b510      	push	{r4, lr}
 80024c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024ce:	4291      	cmp	r1, r2
 80024d0:	d1f9      	bne.n	80024c6 <memcpy+0xe>
 80024d2:	bd10      	pop	{r4, pc}

080024d4 <memmove>:
 80024d4:	4288      	cmp	r0, r1
 80024d6:	b510      	push	{r4, lr}
 80024d8:	eb01 0402 	add.w	r4, r1, r2
 80024dc:	d902      	bls.n	80024e4 <memmove+0x10>
 80024de:	4284      	cmp	r4, r0
 80024e0:	4623      	mov	r3, r4
 80024e2:	d807      	bhi.n	80024f4 <memmove+0x20>
 80024e4:	1e43      	subs	r3, r0, #1
 80024e6:	42a1      	cmp	r1, r4
 80024e8:	d008      	beq.n	80024fc <memmove+0x28>
 80024ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80024f2:	e7f8      	b.n	80024e6 <memmove+0x12>
 80024f4:	4402      	add	r2, r0
 80024f6:	4601      	mov	r1, r0
 80024f8:	428a      	cmp	r2, r1
 80024fa:	d100      	bne.n	80024fe <memmove+0x2a>
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002506:	e7f7      	b.n	80024f8 <memmove+0x24>

08002508 <_free_r>:
 8002508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800250a:	2900      	cmp	r1, #0
 800250c:	d044      	beq.n	8002598 <_free_r+0x90>
 800250e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002512:	9001      	str	r0, [sp, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f1a1 0404 	sub.w	r4, r1, #4
 800251a:	bfb8      	it	lt
 800251c:	18e4      	addlt	r4, r4, r3
 800251e:	f000 f913 	bl	8002748 <__malloc_lock>
 8002522:	4a1e      	ldr	r2, [pc, #120]	; (800259c <_free_r+0x94>)
 8002524:	9801      	ldr	r0, [sp, #4]
 8002526:	6813      	ldr	r3, [r2, #0]
 8002528:	b933      	cbnz	r3, 8002538 <_free_r+0x30>
 800252a:	6063      	str	r3, [r4, #4]
 800252c:	6014      	str	r4, [r2, #0]
 800252e:	b003      	add	sp, #12
 8002530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002534:	f000 b90e 	b.w	8002754 <__malloc_unlock>
 8002538:	42a3      	cmp	r3, r4
 800253a:	d908      	bls.n	800254e <_free_r+0x46>
 800253c:	6825      	ldr	r5, [r4, #0]
 800253e:	1961      	adds	r1, r4, r5
 8002540:	428b      	cmp	r3, r1
 8002542:	bf01      	itttt	eq
 8002544:	6819      	ldreq	r1, [r3, #0]
 8002546:	685b      	ldreq	r3, [r3, #4]
 8002548:	1949      	addeq	r1, r1, r5
 800254a:	6021      	streq	r1, [r4, #0]
 800254c:	e7ed      	b.n	800252a <_free_r+0x22>
 800254e:	461a      	mov	r2, r3
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	b10b      	cbz	r3, 8002558 <_free_r+0x50>
 8002554:	42a3      	cmp	r3, r4
 8002556:	d9fa      	bls.n	800254e <_free_r+0x46>
 8002558:	6811      	ldr	r1, [r2, #0]
 800255a:	1855      	adds	r5, r2, r1
 800255c:	42a5      	cmp	r5, r4
 800255e:	d10b      	bne.n	8002578 <_free_r+0x70>
 8002560:	6824      	ldr	r4, [r4, #0]
 8002562:	4421      	add	r1, r4
 8002564:	1854      	adds	r4, r2, r1
 8002566:	42a3      	cmp	r3, r4
 8002568:	6011      	str	r1, [r2, #0]
 800256a:	d1e0      	bne.n	800252e <_free_r+0x26>
 800256c:	681c      	ldr	r4, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	6053      	str	r3, [r2, #4]
 8002572:	4421      	add	r1, r4
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	e7da      	b.n	800252e <_free_r+0x26>
 8002578:	d902      	bls.n	8002580 <_free_r+0x78>
 800257a:	230c      	movs	r3, #12
 800257c:	6003      	str	r3, [r0, #0]
 800257e:	e7d6      	b.n	800252e <_free_r+0x26>
 8002580:	6825      	ldr	r5, [r4, #0]
 8002582:	1961      	adds	r1, r4, r5
 8002584:	428b      	cmp	r3, r1
 8002586:	bf04      	itt	eq
 8002588:	6819      	ldreq	r1, [r3, #0]
 800258a:	685b      	ldreq	r3, [r3, #4]
 800258c:	6063      	str	r3, [r4, #4]
 800258e:	bf04      	itt	eq
 8002590:	1949      	addeq	r1, r1, r5
 8002592:	6021      	streq	r1, [r4, #0]
 8002594:	6054      	str	r4, [r2, #4]
 8002596:	e7ca      	b.n	800252e <_free_r+0x26>
 8002598:	b003      	add	sp, #12
 800259a:	bd30      	pop	{r4, r5, pc}
 800259c:	20000094 	.word	0x20000094

080025a0 <sbrk_aligned>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	4e0e      	ldr	r6, [pc, #56]	; (80025dc <sbrk_aligned+0x3c>)
 80025a4:	460c      	mov	r4, r1
 80025a6:	6831      	ldr	r1, [r6, #0]
 80025a8:	4605      	mov	r5, r0
 80025aa:	b911      	cbnz	r1, 80025b2 <sbrk_aligned+0x12>
 80025ac:	f000 f8bc 	bl	8002728 <_sbrk_r>
 80025b0:	6030      	str	r0, [r6, #0]
 80025b2:	4621      	mov	r1, r4
 80025b4:	4628      	mov	r0, r5
 80025b6:	f000 f8b7 	bl	8002728 <_sbrk_r>
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	d00a      	beq.n	80025d4 <sbrk_aligned+0x34>
 80025be:	1cc4      	adds	r4, r0, #3
 80025c0:	f024 0403 	bic.w	r4, r4, #3
 80025c4:	42a0      	cmp	r0, r4
 80025c6:	d007      	beq.n	80025d8 <sbrk_aligned+0x38>
 80025c8:	1a21      	subs	r1, r4, r0
 80025ca:	4628      	mov	r0, r5
 80025cc:	f000 f8ac 	bl	8002728 <_sbrk_r>
 80025d0:	3001      	adds	r0, #1
 80025d2:	d101      	bne.n	80025d8 <sbrk_aligned+0x38>
 80025d4:	f04f 34ff 	mov.w	r4, #4294967295
 80025d8:	4620      	mov	r0, r4
 80025da:	bd70      	pop	{r4, r5, r6, pc}
 80025dc:	20000098 	.word	0x20000098

080025e0 <_malloc_r>:
 80025e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025e4:	1ccd      	adds	r5, r1, #3
 80025e6:	f025 0503 	bic.w	r5, r5, #3
 80025ea:	3508      	adds	r5, #8
 80025ec:	2d0c      	cmp	r5, #12
 80025ee:	bf38      	it	cc
 80025f0:	250c      	movcc	r5, #12
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	4607      	mov	r7, r0
 80025f6:	db01      	blt.n	80025fc <_malloc_r+0x1c>
 80025f8:	42a9      	cmp	r1, r5
 80025fa:	d905      	bls.n	8002608 <_malloc_r+0x28>
 80025fc:	230c      	movs	r3, #12
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	2600      	movs	r6, #0
 8002602:	4630      	mov	r0, r6
 8002604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002608:	4e2e      	ldr	r6, [pc, #184]	; (80026c4 <_malloc_r+0xe4>)
 800260a:	f000 f89d 	bl	8002748 <__malloc_lock>
 800260e:	6833      	ldr	r3, [r6, #0]
 8002610:	461c      	mov	r4, r3
 8002612:	bb34      	cbnz	r4, 8002662 <_malloc_r+0x82>
 8002614:	4629      	mov	r1, r5
 8002616:	4638      	mov	r0, r7
 8002618:	f7ff ffc2 	bl	80025a0 <sbrk_aligned>
 800261c:	1c43      	adds	r3, r0, #1
 800261e:	4604      	mov	r4, r0
 8002620:	d14d      	bne.n	80026be <_malloc_r+0xde>
 8002622:	6834      	ldr	r4, [r6, #0]
 8002624:	4626      	mov	r6, r4
 8002626:	2e00      	cmp	r6, #0
 8002628:	d140      	bne.n	80026ac <_malloc_r+0xcc>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	4631      	mov	r1, r6
 800262e:	4638      	mov	r0, r7
 8002630:	eb04 0803 	add.w	r8, r4, r3
 8002634:	f000 f878 	bl	8002728 <_sbrk_r>
 8002638:	4580      	cmp	r8, r0
 800263a:	d13a      	bne.n	80026b2 <_malloc_r+0xd2>
 800263c:	6821      	ldr	r1, [r4, #0]
 800263e:	3503      	adds	r5, #3
 8002640:	1a6d      	subs	r5, r5, r1
 8002642:	f025 0503 	bic.w	r5, r5, #3
 8002646:	3508      	adds	r5, #8
 8002648:	2d0c      	cmp	r5, #12
 800264a:	bf38      	it	cc
 800264c:	250c      	movcc	r5, #12
 800264e:	4629      	mov	r1, r5
 8002650:	4638      	mov	r0, r7
 8002652:	f7ff ffa5 	bl	80025a0 <sbrk_aligned>
 8002656:	3001      	adds	r0, #1
 8002658:	d02b      	beq.n	80026b2 <_malloc_r+0xd2>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	442b      	add	r3, r5
 800265e:	6023      	str	r3, [r4, #0]
 8002660:	e00e      	b.n	8002680 <_malloc_r+0xa0>
 8002662:	6822      	ldr	r2, [r4, #0]
 8002664:	1b52      	subs	r2, r2, r5
 8002666:	d41e      	bmi.n	80026a6 <_malloc_r+0xc6>
 8002668:	2a0b      	cmp	r2, #11
 800266a:	d916      	bls.n	800269a <_malloc_r+0xba>
 800266c:	1961      	adds	r1, r4, r5
 800266e:	42a3      	cmp	r3, r4
 8002670:	6025      	str	r5, [r4, #0]
 8002672:	bf18      	it	ne
 8002674:	6059      	strne	r1, [r3, #4]
 8002676:	6863      	ldr	r3, [r4, #4]
 8002678:	bf08      	it	eq
 800267a:	6031      	streq	r1, [r6, #0]
 800267c:	5162      	str	r2, [r4, r5]
 800267e:	604b      	str	r3, [r1, #4]
 8002680:	4638      	mov	r0, r7
 8002682:	f104 060b 	add.w	r6, r4, #11
 8002686:	f000 f865 	bl	8002754 <__malloc_unlock>
 800268a:	f026 0607 	bic.w	r6, r6, #7
 800268e:	1d23      	adds	r3, r4, #4
 8002690:	1af2      	subs	r2, r6, r3
 8002692:	d0b6      	beq.n	8002602 <_malloc_r+0x22>
 8002694:	1b9b      	subs	r3, r3, r6
 8002696:	50a3      	str	r3, [r4, r2]
 8002698:	e7b3      	b.n	8002602 <_malloc_r+0x22>
 800269a:	6862      	ldr	r2, [r4, #4]
 800269c:	42a3      	cmp	r3, r4
 800269e:	bf0c      	ite	eq
 80026a0:	6032      	streq	r2, [r6, #0]
 80026a2:	605a      	strne	r2, [r3, #4]
 80026a4:	e7ec      	b.n	8002680 <_malloc_r+0xa0>
 80026a6:	4623      	mov	r3, r4
 80026a8:	6864      	ldr	r4, [r4, #4]
 80026aa:	e7b2      	b.n	8002612 <_malloc_r+0x32>
 80026ac:	4634      	mov	r4, r6
 80026ae:	6876      	ldr	r6, [r6, #4]
 80026b0:	e7b9      	b.n	8002626 <_malloc_r+0x46>
 80026b2:	230c      	movs	r3, #12
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	4638      	mov	r0, r7
 80026b8:	f000 f84c 	bl	8002754 <__malloc_unlock>
 80026bc:	e7a1      	b.n	8002602 <_malloc_r+0x22>
 80026be:	6025      	str	r5, [r4, #0]
 80026c0:	e7de      	b.n	8002680 <_malloc_r+0xa0>
 80026c2:	bf00      	nop
 80026c4:	20000094 	.word	0x20000094

080026c8 <_realloc_r>:
 80026c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026cc:	4680      	mov	r8, r0
 80026ce:	4614      	mov	r4, r2
 80026d0:	460e      	mov	r6, r1
 80026d2:	b921      	cbnz	r1, 80026de <_realloc_r+0x16>
 80026d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026d8:	4611      	mov	r1, r2
 80026da:	f7ff bf81 	b.w	80025e0 <_malloc_r>
 80026de:	b92a      	cbnz	r2, 80026ec <_realloc_r+0x24>
 80026e0:	f7ff ff12 	bl	8002508 <_free_r>
 80026e4:	4625      	mov	r5, r4
 80026e6:	4628      	mov	r0, r5
 80026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026ec:	f000 f838 	bl	8002760 <_malloc_usable_size_r>
 80026f0:	4284      	cmp	r4, r0
 80026f2:	4607      	mov	r7, r0
 80026f4:	d802      	bhi.n	80026fc <_realloc_r+0x34>
 80026f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80026fa:	d812      	bhi.n	8002722 <_realloc_r+0x5a>
 80026fc:	4621      	mov	r1, r4
 80026fe:	4640      	mov	r0, r8
 8002700:	f7ff ff6e 	bl	80025e0 <_malloc_r>
 8002704:	4605      	mov	r5, r0
 8002706:	2800      	cmp	r0, #0
 8002708:	d0ed      	beq.n	80026e6 <_realloc_r+0x1e>
 800270a:	42bc      	cmp	r4, r7
 800270c:	4622      	mov	r2, r4
 800270e:	4631      	mov	r1, r6
 8002710:	bf28      	it	cs
 8002712:	463a      	movcs	r2, r7
 8002714:	f7ff fed0 	bl	80024b8 <memcpy>
 8002718:	4631      	mov	r1, r6
 800271a:	4640      	mov	r0, r8
 800271c:	f7ff fef4 	bl	8002508 <_free_r>
 8002720:	e7e1      	b.n	80026e6 <_realloc_r+0x1e>
 8002722:	4635      	mov	r5, r6
 8002724:	e7df      	b.n	80026e6 <_realloc_r+0x1e>
	...

08002728 <_sbrk_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4d06      	ldr	r5, [pc, #24]	; (8002744 <_sbrk_r+0x1c>)
 800272c:	2300      	movs	r3, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fe f988 	bl	8000a48 <_sbrk>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_sbrk_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_sbrk_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	2000009c 	.word	0x2000009c

08002748 <__malloc_lock>:
 8002748:	4801      	ldr	r0, [pc, #4]	; (8002750 <__malloc_lock+0x8>)
 800274a:	f000 b811 	b.w	8002770 <__retarget_lock_acquire_recursive>
 800274e:	bf00      	nop
 8002750:	200000a0 	.word	0x200000a0

08002754 <__malloc_unlock>:
 8002754:	4801      	ldr	r0, [pc, #4]	; (800275c <__malloc_unlock+0x8>)
 8002756:	f000 b80c 	b.w	8002772 <__retarget_lock_release_recursive>
 800275a:	bf00      	nop
 800275c:	200000a0 	.word	0x200000a0

08002760 <_malloc_usable_size_r>:
 8002760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002764:	1f18      	subs	r0, r3, #4
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfbc      	itt	lt
 800276a:	580b      	ldrlt	r3, [r1, r0]
 800276c:	18c0      	addlt	r0, r0, r3
 800276e:	4770      	bx	lr

08002770 <__retarget_lock_acquire_recursive>:
 8002770:	4770      	bx	lr

08002772 <__retarget_lock_release_recursive>:
 8002772:	4770      	bx	lr

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
