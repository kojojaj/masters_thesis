
masters_thesis_emulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800282c  0800282c  0001282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d4  080028d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080028d4  080028d4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028d4  080028d4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080028dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  0800294c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800294c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000055ab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001434  00000000  00000000  0002564b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00026a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  000270b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c24  00000000  00000000  00027628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007338  00000000  00000000  0004d24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4611  00000000  00000000  00054584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138b95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a68  00000000  00000000  00138be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002814 	.word	0x08002814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002814 	.word	0x08002814

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000286:	f107 030c 	add.w	r3, r7, #12
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <MX_GPIO_Init+0xc4>)
 8000298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800029a:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <MX_GPIO_Init+0xc4>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002a2:	4b28      	ldr	r3, [pc, #160]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a6:	f003 0304 	and.w	r3, r3, #4
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b25      	ldr	r3, [pc, #148]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b2:	4a24      	ldr	r2, [pc, #144]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002b4:	f043 0302 	orr.w	r3, r3, #2
 80002b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ba:	4b22      	ldr	r3, [pc, #136]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002be:	f003 0302 	and.w	r3, r3, #2
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c6:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002d2:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <MX_GPIO_Init+0xc4>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 80002de:	2200      	movs	r2, #0
 80002e0:	f64f 0106 	movw	r1, #63494	; 0xf806
 80002e4:	4818      	ldr	r0, [pc, #96]	; (8000348 <MX_GPIO_Init+0xc8>)
 80002e6:	f000 ffb1 	bl	800124c <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin|BUTTON_RIGHT_Pin|BUTTON_DOWN_Pin|BUTTON_LEFT_Pin;
 80002ea:	f44f 7358 	mov.w	r3, #864	; 0x360
 80002ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002f4:	2302      	movs	r3, #2
 80002f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	4619      	mov	r1, r3
 80002fe:	4813      	ldr	r0, [pc, #76]	; (800034c <MX_GPIO_Init+0xcc>)
 8000300:	f000 fde2 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000304:	f64f 0306 	movw	r3, #63494	; 0xf806
 8000308:	60fb      	str	r3, [r7, #12]
                          |LCD_RS_Pin|LCD_RW_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2300      	movs	r3, #0
 8000314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	4619      	mov	r1, r3
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <MX_GPIO_Init+0xc8>)
 800031e:	f000 fdd3 	bl	8000ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_ENTER_Pin;
 8000322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000326:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000328:	2300      	movs	r3, #0
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800032c:	2302      	movs	r3, #2
 800032e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_ENTER_GPIO_Port, &GPIO_InitStruct);
 8000330:	f107 030c 	add.w	r3, r7, #12
 8000334:	4619      	mov	r1, r3
 8000336:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_GPIO_Init+0xc8>)
 8000338:	f000 fdc6 	bl	8000ec8 <HAL_GPIO_Init>

}
 800033c:	bf00      	nop
 800033e:	3720      	adds	r7, #32
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	40021000 	.word	0x40021000
 8000348:	48000400 	.word	0x48000400
 800034c:	48000800 	.word	0x48000800

08000350 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000350:	b5b0      	push	{r4, r5, r7, lr}
 8000352:	b08a      	sub	sp, #40	; 0x28
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
 800035c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800035e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000362:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000366:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800036a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800036c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800036e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f80e 	bl	80003a6 <Lcd_init>

	return lcd;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	461d      	mov	r5, r3
 800038e:	f107 0410 	add.w	r4, r7, #16
 8000392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800039a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800039e:	68f8      	ldr	r0, [r7, #12]
 80003a0:	3728      	adds	r7, #40	; 0x28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bdb0      	pop	{r4, r5, r7, pc}

080003a6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	b082      	sub	sp, #8
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	7d9b      	ldrb	r3, [r3, #22]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d10c      	bne.n	80003d0 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80003b6:	2133      	movs	r1, #51	; 0x33
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 f86f 	bl	800049c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80003be:	2132      	movs	r1, #50	; 0x32
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 f86b 	bl	800049c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80003c6:	2128      	movs	r1, #40	; 0x28
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 f867 	bl	800049c <lcd_write_command>
 80003ce:	e003      	b.n	80003d8 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80003d0:	2138      	movs	r1, #56	; 0x38
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f862 	bl	800049c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 80003d8:	2101      	movs	r1, #1
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f000 f85e 	bl	800049c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80003e0:	210c      	movs	r1, #12
 80003e2:	6878      	ldr	r0, [r7, #4]
 80003e4:	f000 f85a 	bl	800049c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 80003e8:	2106      	movs	r1, #6
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 f856 	bl	800049c <lcd_write_command>
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000402:	f107 030c 	add.w	r3, r7, #12
 8000406:	683a      	ldr	r2, [r7, #0]
 8000408:	4906      	ldr	r1, [pc, #24]	; (8000424 <Lcd_int+0x2c>)
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fd94 	bl	8001f38 <siprintf>

	Lcd_string(lcd, buffer);
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f806 	bl	8000428 <Lcd_string>
}
 800041c:	bf00      	nop
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	0800282c 	.word	0x0800282c

08000428 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000432:	2300      	movs	r3, #0
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e00a      	b.n	800044e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	4413      	add	r3, r2
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	4619      	mov	r1, r3
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f000 f858 	bl	80004f8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000448:	7bfb      	ldrb	r3, [r7, #15]
 800044a:	3301      	adds	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
 800044e:	7bfc      	ldrb	r4, [r7, #15]
 8000450:	6838      	ldr	r0, [r7, #0]
 8000452:	f7ff febd 	bl	80001d0 <strlen>
 8000456:	4603      	mov	r3, r0
 8000458:	429c      	cmp	r4, r3
 800045a:	d3ed      	bcc.n	8000438 <Lcd_string+0x10>
	}
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bd90      	pop	{r4, r7, pc}
	...

08000468 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	460b      	mov	r3, r1
 8000472:	70fb      	strb	r3, [r7, #3]
 8000474:	4613      	mov	r3, r2
 8000476:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	4a07      	ldr	r2, [pc, #28]	; (8000498 <Lcd_cursor+0x30>)
 800047c:	5cd2      	ldrb	r2, [r2, r3]
 800047e:	78bb      	ldrb	r3, [r7, #2]
 8000480:	4413      	add	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	3b80      	subs	r3, #128	; 0x80
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4619      	mov	r1, r3
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f000 f806 	bl	800049c <lcd_write_command>
	#endif
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	0800285c 	.word	0x0800285c

0800049c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	6898      	ldr	r0, [r3, #8]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	899b      	ldrh	r3, [r3, #12]
 80004b0:	2200      	movs	r2, #0
 80004b2:	4619      	mov	r1, r3
 80004b4:	f000 feca 	bl	800124c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	7d9b      	ldrb	r3, [r3, #22]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80004c0:	78fb      	ldrb	r3, [r7, #3]
 80004c2:	091b      	lsrs	r3, r3, #4
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2204      	movs	r2, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f842 	bl	8000554 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2204      	movs	r2, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f839 	bl	8000554 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80004e2:	e005      	b.n	80004f0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	2208      	movs	r2, #8
 80004e8:	4619      	mov	r1, r3
 80004ea:	6878      	ldr	r0, [r7, #4]
 80004ec:	f000 f832 	bl	8000554 <lcd_write>
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	460b      	mov	r3, r1
 8000502:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6898      	ldr	r0, [r3, #8]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	899b      	ldrh	r3, [r3, #12]
 800050c:	2201      	movs	r2, #1
 800050e:	4619      	mov	r1, r3
 8000510:	f000 fe9c 	bl	800124c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7d9b      	ldrb	r3, [r3, #22]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800051c:	78fb      	ldrb	r3, [r7, #3]
 800051e:	091b      	lsrs	r3, r3, #4
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2204      	movs	r2, #4
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f814 	bl	8000554 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2204      	movs	r2, #4
 8000536:	4619      	mov	r1, r3
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f000 f80b 	bl	8000554 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800053e:	e005      	b.n	800054c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	2208      	movs	r2, #8
 8000544:	4619      	mov	r1, r3
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f804 	bl	8000554 <lcd_write>
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]
 8000568:	e019      	b.n	800059e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	6818      	ldr	r0, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685a      	ldr	r2, [r3, #4]
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	4413      	add	r3, r2
 8000580:	8819      	ldrh	r1, [r3, #0]
 8000582:	78fa      	ldrb	r2, [r7, #3]
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	fa42 f303 	asr.w	r3, r2, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f000 fe5a 	bl	800124c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfa      	ldrb	r2, [r7, #15]
 80005a0:	78bb      	ldrb	r3, [r7, #2]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d3e1      	bcc.n	800056a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6918      	ldr	r0, [r3, #16]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	8a9b      	ldrh	r3, [r3, #20]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	f000 fe4b 	bl	800124c <HAL_GPIO_WritePin>
	DELAY(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fb7c 	bl	8000cb4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6918      	ldr	r0, [r3, #16]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	8a9b      	ldrh	r3, [r3, #20]
 80005c4:	2200      	movs	r2, #0
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 fe40 	bl	800124c <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b09c      	sub	sp, #112	; 0x70
 80005d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 faf6 	bl	8000bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f9dd 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f7ff fe4d 	bl	8000280 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Lcd_PortType ports[] = { LCD_D4_GPIO_Port, LCD_D5_GPIO_Port, LCD_D6_GPIO_Port, LCD_D7_GPIO_Port };
 80005e6:	4ba7      	ldr	r3, [pc, #668]	; (8000884 <main+0x2b0>)
 80005e8:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80005ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin};
 80005f2:	4aa5      	ldr	r2, [pc, #660]	; (8000888 <main+0x2b4>)
 80005f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fc:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;
  lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_4_BIT_MODE);
 8000600:	4638      	mov	r0, r7
 8000602:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000606:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800060a:	2300      	movs	r3, #0
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	4b9d      	ldr	r3, [pc, #628]	; (800088c <main+0x2b8>)
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4b9b      	ldr	r3, [pc, #620]	; (800088c <main+0x2b8>)
 8000620:	f7ff fe96 	bl	8000350 <Lcd_create>
 8000624:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000628:	463d      	mov	r5, r7
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000632:	e884 0003 	stmia.w	r4, {r0, r1}

  bool isEnterPressed = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  struct sMass {
	  uint8_t u;
	  uint8_t t;
	  uint8_t h;
  };
  struct sMass mass = {1, 5, 0};
 800063c:	4a94      	ldr	r2, [pc, #592]	; (8000890 <main+0x2bc>)
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	4611      	mov	r1, r2
 8000646:	8019      	strh	r1, [r3, #0]
 8000648:	3302      	adds	r3, #2
 800064a:	0c12      	lsrs	r2, r2, #16
 800064c:	701a      	strb	r2, [r3, #0]
  int cursor_pos = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	65fb      	str	r3, [r7, #92]	; 0x5c
  char lcd_infoText[] = "masa = ";
 8000652:	4a90      	ldr	r2, [pc, #576]	; (8000894 <main+0x2c0>)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_cursor(&lcd, 0, cursor_pos);
 8000660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fefc 	bl	8000468 <Lcd_cursor>
  Lcd_string(&lcd, lcd_infoText);
 8000670:	f107 021c 	add.w	r2, r7, #28
 8000674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fed4 	bl	8000428 <Lcd_string>
  cursor_pos = strlen(lcd_infoText);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fda3 	bl	80001d0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	65fb      	str	r3, [r7, #92]	; 0x5c
  Lcd_cursor(&lcd, 0, cursor_pos);
 800068e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000690:	b2da      	uxtb	r2, r3
 8000692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fee5 	bl	8000468 <Lcd_cursor>
  Lcd_int(&lcd, mass.u);
 800069e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80006a2:	461a      	mov	r2, r3
 80006a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fea4 	bl	80003f8 <Lcd_int>
  cursor_pos++;
 80006b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006b2:	3301      	adds	r3, #1
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  Lcd_string(&lcd, ".");
 80006b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ba:	4977      	ldr	r1, [pc, #476]	; (8000898 <main+0x2c4>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feb3 	bl	8000428 <Lcd_string>
  cursor_pos = TENTHS;
 80006c2:	2309      	movs	r3, #9
 80006c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  Lcd_int(&lcd, mass.t);
 80006c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80006ca:	461a      	mov	r2, r3
 80006cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe90 	bl	80003f8 <Lcd_int>
  cursor_pos = HUNDREDTHS;
 80006d8:	230a      	movs	r3, #10
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  Lcd_int(&lcd, mass.h);
 80006dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80006e0:	461a      	mov	r2, r3
 80006e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e6:	4611      	mov	r1, r2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fe85 	bl	80003f8 <Lcd_int>

  while (isEnterPressed == false)
 80006ee:	e14a      	b.n	8000986 <main+0x3b2>
  {
	  if(HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) == GPIO_PIN_SET){
 80006f0:	2120      	movs	r1, #32
 80006f2:	486a      	ldr	r0, [pc, #424]	; (800089c <main+0x2c8>)
 80006f4:	f000 fd92 	bl	800121c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d12b      	bne.n	8000756 <main+0x182>
		  switch (cursor_pos){
 80006fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000700:	2b0a      	cmp	r3, #10
 8000702:	d01e      	beq.n	8000742 <main+0x16e>
 8000704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000706:	2b0a      	cmp	r3, #10
 8000708:	f300 80a5 	bgt.w	8000856 <main+0x282>
 800070c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800070e:	2b07      	cmp	r3, #7
 8000710:	d003      	beq.n	800071a <main+0x146>
 8000712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000714:	2b09      	cmp	r3, #9
 8000716:	d00a      	beq.n	800072e <main+0x15a>
		  case (HUNDREDTHS):
			mass.h++;
		  HAL_Delay(CLICK_TIME);
		  break;
		  default:
			  break;
 8000718:	e09d      	b.n	8000856 <main+0x282>
			mass.u++;
 800071a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800071e:	3301      	adds	r3, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		  	HAL_Delay(CLICK_TIME);
 8000726:	2032      	movs	r0, #50	; 0x32
 8000728:	f000 fac4 	bl	8000cb4 <HAL_Delay>
		  break;
 800072c:	e09c      	b.n	8000868 <main+0x294>
			mass.t++;
 800072e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000732:	3301      	adds	r3, #1
 8000734:	b2db      	uxtb	r3, r3
 8000736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		  HAL_Delay(CLICK_TIME);
 800073a:	2032      	movs	r0, #50	; 0x32
 800073c:	f000 faba 	bl	8000cb4 <HAL_Delay>
		  break;
 8000740:	e092      	b.n	8000868 <main+0x294>
			mass.h++;
 8000742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000746:	3301      	adds	r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  HAL_Delay(CLICK_TIME);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f000 fab0 	bl	8000cb4 <HAL_Delay>
		  break;
 8000754:	e088      	b.n	8000868 <main+0x294>
		  }
	  } else if (HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin) == GPIO_PIN_SET) {
 8000756:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075a:	4850      	ldr	r0, [pc, #320]	; (800089c <main+0x2c8>)
 800075c:	f000 fd5e 	bl	800121c <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b01      	cmp	r3, #1
 8000764:	d12a      	bne.n	80007bc <main+0x1e8>
		  switch (cursor_pos){
 8000766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000768:	2b0a      	cmp	r3, #10
 800076a:	d01d      	beq.n	80007a8 <main+0x1d4>
 800076c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800076e:	2b0a      	cmp	r3, #10
 8000770:	dc73      	bgt.n	800085a <main+0x286>
 8000772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000774:	2b07      	cmp	r3, #7
 8000776:	d003      	beq.n	8000780 <main+0x1ac>
 8000778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800077a:	2b09      	cmp	r3, #9
 800077c:	d00a      	beq.n	8000794 <main+0x1c0>
		  case (HUNDREDTHS):
			mass.h--;
		  HAL_Delay(CLICK_TIME);
		  break;
		  default:
		  break;
 800077e:	e06c      	b.n	800085a <main+0x286>
			mass.u--;
 8000780:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000784:	3b01      	subs	r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		  HAL_Delay(CLICK_TIME);
 800078c:	2032      	movs	r0, #50	; 0x32
 800078e:	f000 fa91 	bl	8000cb4 <HAL_Delay>
		  break;
 8000792:	e069      	b.n	8000868 <main+0x294>
			mass.t--;
 8000794:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000798:	3b01      	subs	r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		  HAL_Delay(CLICK_TIME);
 80007a0:	2032      	movs	r0, #50	; 0x32
 80007a2:	f000 fa87 	bl	8000cb4 <HAL_Delay>
		  break;
 80007a6:	e05f      	b.n	8000868 <main+0x294>
			mass.h--;
 80007a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  HAL_Delay(CLICK_TIME);
 80007b4:	2032      	movs	r0, #50	; 0x32
 80007b6:	f000 fa7d 	bl	8000cb4 <HAL_Delay>
		  break;
 80007ba:	e055      	b.n	8000868 <main+0x294>
		  }
	  } else if (HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_Port, BUTTON_LEFT_Pin) == GPIO_PIN_SET){
 80007bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c0:	4836      	ldr	r0, [pc, #216]	; (800089c <main+0x2c8>)
 80007c2:	f000 fd2b 	bl	800121c <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d11e      	bne.n	800080a <main+0x236>
		  switch (cursor_pos){
 80007cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ce:	2b0a      	cmp	r3, #10
 80007d0:	d015      	beq.n	80007fe <main+0x22a>
 80007d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007d4:	2b0a      	cmp	r3, #10
 80007d6:	dc42      	bgt.n	800085e <main+0x28a>
 80007d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007da:	2b07      	cmp	r3, #7
 80007dc:	d003      	beq.n	80007e6 <main+0x212>
 80007de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007e0:	2b09      	cmp	r3, #9
 80007e2:	d006      	beq.n	80007f2 <main+0x21e>
		  break;
		  case (HUNDREDTHS):
				  cursor_pos = TENTHS;
		  HAL_Delay(CLICK_TIME);
		  default:
			  break;
 80007e4:	e03b      	b.n	800085e <main+0x28a>
				  cursor_pos = HUNDREDTHS;
 80007e6:	230a      	movs	r3, #10
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(CLICK_TIME);
 80007ea:	2032      	movs	r0, #50	; 0x32
 80007ec:	f000 fa62 	bl	8000cb4 <HAL_Delay>
		  break;
 80007f0:	e03a      	b.n	8000868 <main+0x294>
				  cursor_pos = UNITIES;
 80007f2:	2307      	movs	r3, #7
 80007f4:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(CLICK_TIME);
 80007f6:	2032      	movs	r0, #50	; 0x32
 80007f8:	f000 fa5c 	bl	8000cb4 <HAL_Delay>
		  break;
 80007fc:	e034      	b.n	8000868 <main+0x294>
				  cursor_pos = TENTHS;
 80007fe:	2309      	movs	r3, #9
 8000800:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(CLICK_TIME);
 8000802:	2032      	movs	r0, #50	; 0x32
 8000804:	f000 fa56 	bl	8000cb4 <HAL_Delay>
			  break;
 8000808:	e029      	b.n	800085e <main+0x28a>
		  }
	  } else if (HAL_GPIO_ReadPin(BUTTON_RIGHT_GPIO_Port, BUTTON_RIGHT_Pin) == GPIO_PIN_SET){
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	4823      	ldr	r0, [pc, #140]	; (800089c <main+0x2c8>)
 800080e:	f000 fd05 	bl	800121c <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	2b01      	cmp	r3, #1
 8000816:	d124      	bne.n	8000862 <main+0x28e>
		  switch (cursor_pos){
 8000818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800081a:	2b0a      	cmp	r3, #10
 800081c:	d015      	beq.n	800084a <main+0x276>
 800081e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000820:	2b0a      	cmp	r3, #10
 8000822:	dc20      	bgt.n	8000866 <main+0x292>
 8000824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000826:	2b07      	cmp	r3, #7
 8000828:	d003      	beq.n	8000832 <main+0x25e>
 800082a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800082c:	2b09      	cmp	r3, #9
 800082e:	d006      	beq.n	800083e <main+0x26a>
		  break;
		  case (HUNDREDTHS):
		  cursor_pos = UNITIES;
		  HAL_Delay(CLICK_TIME);
		  default:
		  break;
 8000830:	e019      	b.n	8000866 <main+0x292>
		  cursor_pos = TENTHS;
 8000832:	2309      	movs	r3, #9
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(CLICK_TIME);
 8000836:	2032      	movs	r0, #50	; 0x32
 8000838:	f000 fa3c 	bl	8000cb4 <HAL_Delay>
		  break;
 800083c:	e014      	b.n	8000868 <main+0x294>
		  cursor_pos = HUNDREDTHS;
 800083e:	230a      	movs	r3, #10
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(CLICK_TIME);
 8000842:	2032      	movs	r0, #50	; 0x32
 8000844:	f000 fa36 	bl	8000cb4 <HAL_Delay>
		  break;
 8000848:	e00e      	b.n	8000868 <main+0x294>
		  cursor_pos = UNITIES;
 800084a:	2307      	movs	r3, #7
 800084c:	65fb      	str	r3, [r7, #92]	; 0x5c
		  HAL_Delay(CLICK_TIME);
 800084e:	2032      	movs	r0, #50	; 0x32
 8000850:	f000 fa30 	bl	8000cb4 <HAL_Delay>
		  break;
 8000854:	e007      	b.n	8000866 <main+0x292>
			  break;
 8000856:	bf00      	nop
 8000858:	e006      	b.n	8000868 <main+0x294>
		  break;
 800085a:	bf00      	nop
 800085c:	e004      	b.n	8000868 <main+0x294>
			  break;
 800085e:	bf00      	nop
 8000860:	e002      	b.n	8000868 <main+0x294>
		  }
	  }
 8000862:	bf00      	nop
 8000864:	e000      	b.n	8000868 <main+0x294>
		  break;
 8000866:	bf00      	nop
	  switch (cursor_pos){
 8000868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d064      	beq.n	8000938 <main+0x364>
 800086e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000870:	2b0a      	cmp	r3, #10
 8000872:	f300 8087 	bgt.w	8000984 <main+0x3b0>
 8000876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000878:	2b07      	cmp	r3, #7
 800087a:	d011      	beq.n	80008a0 <main+0x2cc>
 800087c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800087e:	2b09      	cmp	r3, #9
 8000880:	d034      	beq.n	80008ec <main+0x318>
 8000882:	e07f      	b.n	8000984 <main+0x3b0>
 8000884:	08002838 	.word	0x08002838
 8000888:	08002848 	.word	0x08002848
 800088c:	48000400 	.word	0x48000400
 8000890:	08002850 	.word	0x08002850
 8000894:	08002854 	.word	0x08002854
 8000898:	08002830 	.word	0x08002830
 800089c:	48000800 	.word	0x48000800
	  case (UNITIES):
		  Lcd_cursor(&lcd, 0, cursor_pos);
 80008a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fddc 	bl	8000468 <Lcd_cursor>
	  	  Lcd_string(&lcd, " ");
 80008b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b4:	4938      	ldr	r1, [pc, #224]	; (8000998 <main+0x3c4>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fdb6 	bl	8000428 <Lcd_string>
	  	  HAL_Delay(BLINK_TIME);
 80008bc:	207d      	movs	r0, #125	; 0x7d
 80008be:	f000 f9f9 	bl	8000cb4 <HAL_Delay>
	  	  Lcd_cursor(&lcd, 0, cursor_pos);
 80008c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fdcb 	bl	8000468 <Lcd_cursor>
	  	  Lcd_int(&lcd, mass.u);
 80008d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008d6:	461a      	mov	r2, r3
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fd8a 	bl	80003f8 <Lcd_int>
	  	  HAL_Delay(BLINK_TIME);
 80008e4:	207d      	movs	r0, #125	; 0x7d
 80008e6:	f000 f9e5 	bl	8000cb4 <HAL_Delay>
	  	  break;
 80008ea:	e04c      	b.n	8000986 <main+0x3b2>
	  case (TENTHS):
		  Lcd_cursor(&lcd, 0, cursor_pos);
 80008ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fdb6 	bl	8000468 <Lcd_cursor>
	  	  Lcd_string(&lcd, " ");
 80008fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000900:	4925      	ldr	r1, [pc, #148]	; (8000998 <main+0x3c4>)
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fd90 	bl	8000428 <Lcd_string>
	  	  HAL_Delay(BLINK_TIME);
 8000908:	207d      	movs	r0, #125	; 0x7d
 800090a:	f000 f9d3 	bl	8000cb4 <HAL_Delay>
	  	  Lcd_cursor(&lcd, 0, cursor_pos);
 800090e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000910:	b2da      	uxtb	r2, r3
 8000912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fda5 	bl	8000468 <Lcd_cursor>
	  	  Lcd_int(&lcd, mass.t);
 800091e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000922:	461a      	mov	r2, r3
 8000924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fd64 	bl	80003f8 <Lcd_int>
	  	  HAL_Delay(BLINK_TIME);
 8000930:	207d      	movs	r0, #125	; 0x7d
 8000932:	f000 f9bf 	bl	8000cb4 <HAL_Delay>
	  	  break;
 8000936:	e026      	b.n	8000986 <main+0x3b2>
	  case (HUNDREDTHS):
		  Lcd_cursor(&lcd, 0, cursor_pos);
 8000938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800093a:	b2da      	uxtb	r2, r3
 800093c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fd90 	bl	8000468 <Lcd_cursor>
	  	  Lcd_string(&lcd, " ");
 8000948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094c:	4912      	ldr	r1, [pc, #72]	; (8000998 <main+0x3c4>)
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fd6a 	bl	8000428 <Lcd_string>
	  	  HAL_Delay(BLINK_TIME);
 8000954:	207d      	movs	r0, #125	; 0x7d
 8000956:	f000 f9ad 	bl	8000cb4 <HAL_Delay>
	  	  Lcd_cursor(&lcd, 0, cursor_pos);
 800095a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095c:	b2da      	uxtb	r2, r3
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fd7f 	bl	8000468 <Lcd_cursor>
	  	  Lcd_int(&lcd, mass.h);
 800096a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800096e:	461a      	mov	r2, r3
 8000970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd3e 	bl	80003f8 <Lcd_int>
	  	  HAL_Delay(BLINK_TIME);
 800097c:	207d      	movs	r0, #125	; 0x7d
 800097e:	f000 f999 	bl	8000cb4 <HAL_Delay>
	      break;
 8000982:	e000      	b.n	8000986 <main+0x3b2>
	  default:
		  break;
 8000984:	bf00      	nop
  while (isEnterPressed == false)
 8000986:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800098a:	f083 0301 	eor.w	r3, r3, #1
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	f47f aead 	bne.w	80006f0 <main+0x11c>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x3c2>
 8000998:	08002834 	.word	0x08002834

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b096      	sub	sp, #88	; 0x58
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2244      	movs	r2, #68	; 0x44
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fabc 	bl	8001f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	463b      	mov	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009c2:	f000 fc69 	bl	8001298 <HAL_PWREx_ControlVoltageScaling>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009cc:	f000 f838 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009d0:	2310      	movs	r3, #16
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009d4:	2301      	movs	r3, #1
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009dc:	2360      	movs	r3, #96	; 0x60
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009e4:	2301      	movs	r3, #1
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009ec:	2328      	movs	r3, #40	; 0x28
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009f0:	2307      	movs	r3, #7
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fc9f 	bl	8001344 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a0c:	f000 f818 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2303      	movs	r3, #3
 8000a16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	2104      	movs	r1, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 f867 	bl	8001afc <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a34:	f000 f804 	bl	8000a40 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3758      	adds	r7, #88	; 0x58
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8c8 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f001 f9dc 	bl	8001ed4 <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20018000 	.word	0x20018000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	200000a8 	.word	0x200000a8

08000b54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b7c:	f7ff ffea 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f001 f99b 	bl	8001ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000baa:	f7ff fd13 	bl	80005d4 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bbc:	080028dc 	.word	0x080028dc
  ldr r2, =_sbss
 8000bc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bc4:	200000a4 	.word	0x200000a4

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>

08000bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f943 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bda:	200f      	movs	r0, #15
 8000bdc:	f000 f80e 	bl	8000bfc <HAL_InitTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	e001      	b.n	8000bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bec:	f7ff ff2e 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d023      	beq.n	8000c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_InitTick+0x70>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f941 	bl	8000eae <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10f      	bne.n	8000c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d809      	bhi.n	8000c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f919 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x74>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e001      	b.n	8000c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000090 	.word	0x20000090

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000090 	.word	0x20000090

08000cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cbc:	f7ff ffee 	bl	8000c9c <HAL_GetTick>
 8000cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	d005      	beq.n	8000cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_Delay+0x44>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cda:	bf00      	nop
 8000cdc:	f7ff ffde 	bl	8000c9c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f7      	bhi.n	8000cdc <HAL_Delay+0x28>
  {
  }
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e88:	f7ff ff5c 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68b9      	ldr	r1, [r7, #8]
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff ff8e 	bl	8000db4 <NVIC_EncodePriority>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff5d 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea6:	bf00      	nop
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ffb0 	bl	8000e1c <SysTick_Config>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed6:	e17f      	b.n	80011d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8171 	beq.w	80011d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d005      	beq.n	8000f08 <HAL_GPIO_Init+0x40>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d130      	bne.n	8000f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	f003 0201 	and.w	r2, r3, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d118      	bne.n	8000fa8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	f003 0201 	and.w	r2, r3, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d017      	beq.n	8000fe4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d123      	bne.n	8001038 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0307 	and.w	r3, r3, #7
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	08da      	lsrs	r2, r3, #3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3208      	adds	r2, #8
 8001032:	6939      	ldr	r1, [r7, #16]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	2203      	movs	r2, #3
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0203 	and.w	r2, r3, #3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80ac 	beq.w	80011d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x330>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <HAL_GPIO_Init+0x330>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x330>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001092:	4a5a      	ldr	r2, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x334>)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x242>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x338>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x23e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x33c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x23a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x340>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x236>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x344>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x232>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x348>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x22e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4a      	ldr	r2, [pc, #296]	; (8001214 <HAL_GPIO_Init+0x34c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x22a>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00c      	b.n	800110c <HAL_GPIO_Init+0x244>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00a      	b.n	800110c <HAL_GPIO_Init+0x244>
 80010f6:	2305      	movs	r3, #5
 80010f8:	e008      	b.n	800110c <HAL_GPIO_Init+0x244>
 80010fa:	2304      	movs	r3, #4
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x244>
 80010fe:	2303      	movs	r3, #3
 8001100:	e004      	b.n	800110c <HAL_GPIO_Init+0x244>
 8001102:	2302      	movs	r3, #2
 8001104:	e002      	b.n	800110c <HAL_GPIO_Init+0x244>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_GPIO_Init+0x244>
 800110a:	2300      	movs	r3, #0
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	f002 0203 	and.w	r2, r2, #3
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	4093      	lsls	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800111c:	4937      	ldr	r1, [pc, #220]	; (80011fc <HAL_GPIO_Init+0x334>)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	3302      	adds	r3, #2
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_GPIO_Init+0x350>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_GPIO_Init+0x350>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001154:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_GPIO_Init+0x350>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <HAL_GPIO_Init+0x350>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_GPIO_Init+0x350>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <HAL_GPIO_Init+0x350>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_GPIO_Init+0x350>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <HAL_GPIO_Init+0x350>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3301      	adds	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f47f ae78 	bne.w	8000ed8 <HAL_GPIO_Init+0x10>
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800
 8001208:	48000c00 	.word	0x48000c00
 800120c:	48001000 	.word	0x48001000
 8001210:	48001400 	.word	0x48001400
 8001214:	48001800 	.word	0x48001800
 8001218:	40010400 	.word	0x40010400

0800121c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e001      	b.n	800123e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_PWREx_GetVoltageRange+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000

08001298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a6:	d130      	bne.n	800130a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b4:	d038      	beq.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2232      	movs	r2, #50	; 0x32
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012dc:	e002      	b.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f0:	d102      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f2      	bne.n	80012de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001304:	d110      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e00f      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001316:	d007      	beq.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000
 800133c:	20000000 	.word	0x20000000
 8001340:	431bde83 	.word	0x431bde83

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e3ca      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001356:	4b97      	ldr	r3, [pc, #604]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001360:	4b94      	ldr	r3, [pc, #592]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80e4 	beq.w	8001540 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_RCC_OscConfig+0x4a>
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	f040 808b 	bne.w	800149c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 8087 	bne.w	800149c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138e:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x62>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e3a2      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1a      	ldr	r2, [r3, #32]
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_RCC_OscConfig+0x7c>
 80013b6:	4b7f      	ldr	r3, [pc, #508]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	e005      	b.n	80013cc <HAL_RCC_OscConfig+0x88>
 80013c0:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d223      	bcs.n	8001418 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fd1d 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e383      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e4:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a72      	ldr	r2, [pc, #456]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	496d      	ldr	r1, [pc, #436]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	4968      	ldr	r1, [pc, #416]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
 8001416:	e025      	b.n	8001464 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a65      	ldr	r2, [pc, #404]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4960      	ldr	r1, [pc, #384]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001436:	4b5f      	ldr	r3, [pc, #380]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	495b      	ldr	r1, [pc, #364]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fcdd 	bl	8001e14 <RCC_SetFlashLatencyFromMSIRange>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e343      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001464:	f000 fc4a 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b52      	ldr	r3, [pc, #328]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4950      	ldr	r1, [pc, #320]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	4a4e      	ldr	r2, [pc, #312]	; (80015bc <HAL_RCC_OscConfig+0x278>)
 8001482:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001484:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <HAL_RCC_OscConfig+0x27c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fbb7 	bl	8000bfc <HAL_InitTick>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d052      	beq.n	800153e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	e327      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d032      	beq.n	800150a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a4:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a42      	ldr	r2, [pc, #264]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fbf4 	bl	8000c9c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b8:	f7ff fbf0 	bl	8000c9c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e310      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a36      	ldr	r2, [pc, #216]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4931      	ldr	r1, [pc, #196]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	492c      	ldr	r1, [pc, #176]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e01a      	b.n	8001540 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a29      	ldr	r2, [pc, #164]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001516:	f7ff fbc1 	bl	8000c9c <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800151e:	f7ff fbbd 	bl	8000c9c <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e2dd      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x1da>
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d074      	beq.n	8001636 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b08      	cmp	r3, #8
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x21a>
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	d10e      	bne.n	8001576 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d10b      	bne.n	8001576 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d064      	beq.n	8001634 <HAL_RCC_OscConfig+0x2f0>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d160      	bne.n	8001634 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e2ba      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x24a>
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e026      	b.n	80015dc <HAL_RCC_OscConfig+0x298>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001596:	d115      	bne.n	80015c4 <HAL_RCC_OscConfig+0x280>
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800159e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a02      	ldr	r2, [pc, #8]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e014      	b.n	80015dc <HAL_RCC_OscConfig+0x298>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	08002860 	.word	0x08002860
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004
 80015c4:	4ba0      	ldr	r3, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a9f      	ldr	r2, [pc, #636]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b9d      	ldr	r3, [pc, #628]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a9c      	ldr	r2, [pc, #624]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb5a 	bl	8000c9c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fb56 	bl	8000c9c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e276      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2a8>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fb46 	bl	8000c9c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fb42 	bl	8000c9c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e262      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d0>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d060      	beq.n	8001704 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x310>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d119      	bne.n	8001682 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d116      	bne.n	8001682 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001654:	4b7c      	ldr	r3, [pc, #496]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x328>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e23f      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	4973      	ldr	r1, [pc, #460]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	e040      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d023      	beq.n	80016d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	4b6f      	ldr	r3, [pc, #444]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a6e      	ldr	r2, [pc, #440]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fb01 	bl	8000c9c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fafd 	bl	8000c9c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e21d      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	495f      	ldr	r1, [pc, #380]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a5c      	ldr	r2, [pc, #368]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fadd 	bl	8000c9c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fad9 	bl	8000c9c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1f9      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d03c      	beq.n	800178a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01c      	beq.n	8001752 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	4a4a      	ldr	r2, [pc, #296]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fab8 	bl	8000c9c <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fab4 	bl	8000c9c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1d4      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001742:	4b41      	ldr	r3, [pc, #260]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ef      	beq.n	8001730 <HAL_RCC_OscConfig+0x3ec>
 8001750:	e01b      	b.n	800178a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	4a3b      	ldr	r2, [pc, #236]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fa9b 	bl	8000c9c <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fa97 	bl	8000c9c <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1b7      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177c:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ef      	bne.n	800176a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a6 	beq.w	80018e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6593      	str	r3, [r2, #88]	; 0x58
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c0:	2301      	movs	r3, #1
 80017c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d118      	bne.n	8001802 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff fa5e 	bl	8000c9c <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e4:	f7ff fa5a 	bl	8000c9c <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e17a      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_RCC_OscConfig+0x508>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_RCC_OscConfig+0x4d8>
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181a:	e029      	b.n	8001870 <HAL_RCC_OscConfig+0x52c>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d115      	bne.n	8001850 <HAL_RCC_OscConfig+0x50c>
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_RCC_OscConfig+0x504>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001844:	e014      	b.n	8001870 <HAL_RCC_OscConfig+0x52c>
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	4b9c      	ldr	r3, [pc, #624]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001856:	4a9b      	ldr	r2, [pc, #620]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001860:	4b98      	ldr	r3, [pc, #608]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a97      	ldr	r2, [pc, #604]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d016      	beq.n	80018a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff fa10 	bl	8000c9c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7ff fa0c 	bl	8000c9c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e12a      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001896:	4b8b      	ldr	r3, [pc, #556]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ed      	beq.n	8001880 <HAL_RCC_OscConfig+0x53c>
 80018a4:	e015      	b.n	80018d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff f9f9 	bl	8000c9c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f9f5 	bl	8000c9c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e113      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	4b7f      	ldr	r3, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80fe 	beq.w	8001aea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	f040 80d0 	bne.w	8001a98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018f8:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	429a      	cmp	r2, r3
 800190a:	d130      	bne.n	800196e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	3b01      	subs	r3, #1
 8001918:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d127      	bne.n	800196e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d11f      	bne.n	800196e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001938:	2a07      	cmp	r2, #7
 800193a:	bf14      	ite	ne
 800193c:	2201      	movne	r2, #1
 800193e:	2200      	moveq	r2, #0
 8001940:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001942:	4293      	cmp	r3, r2
 8001944:	d113      	bne.n	800196e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	3b01      	subs	r3, #1
 8001954:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d109      	bne.n	800196e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d06e      	beq.n	8001a4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	2b0c      	cmp	r3, #12
 8001972:	d069      	beq.n	8001a48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0ad      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800199c:	f7ff f97e 	bl	8000c9c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f97a 	bl	8000c9c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e09a      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	4b40      	ldr	r3, [pc, #256]	; (8001ac8 <HAL_RCC_OscConfig+0x784>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019d2:	3a01      	subs	r2, #1
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019dc:	0212      	lsls	r2, r2, #8
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019e4:	0852      	lsrs	r2, r2, #1
 80019e6:	3a01      	subs	r2, #1
 80019e8:	0552      	lsls	r2, r2, #21
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019f0:	0852      	lsrs	r2, r2, #1
 80019f2:	3a01      	subs	r2, #1
 80019f4:	0652      	lsls	r2, r2, #25
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019fc:	0912      	lsrs	r2, r2, #4
 80019fe:	0452      	lsls	r2, r2, #17
 8001a00:	430a      	orrs	r2, r1
 8001a02:	4930      	ldr	r1, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a08:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	4a2a      	ldr	r2, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a20:	f7ff f93c 	bl	8000c9c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f938 	bl	8000c9c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e058      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a46:	e050      	b.n	8001aea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e04f      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d148      	bne.n	8001aea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a64:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a16      	ldr	r2, [pc, #88]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a70:	f7ff f914 	bl	8000c9c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff f910 	bl	8000c9c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e030      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x734>
 8001a96:	e028      	b.n	8001aea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d023      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_RCC_OscConfig+0x780>)
 8001aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f8f7 	bl	8000c9c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	e00c      	b.n	8001acc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f8f3 	bl	8000c9c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d905      	bls.n	8001acc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e013      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_OscConfig+0x7b0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ec      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x7b0>)
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4905      	ldr	r1, [pc, #20]	; (8001af4 <HAL_RCC_OscConfig+0x7b0>)
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x7b4>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
 8001ae4:	e001      	b.n	8001aea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	feeefffc 	.word	0xfeeefffc

08001afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0e7      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b10:	4b75      	ldr	r3, [pc, #468]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d910      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b72      	ldr	r3, [pc, #456]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4970      	ldr	r1, [pc, #448]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0cf      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d908      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4960      	ldr	r1, [pc, #384]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d04c      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d121      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e0a6      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9a:	4b54      	ldr	r3, [pc, #336]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d115      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e09a      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e08e      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e086      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f023 0203 	bic.w	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4943      	ldr	r1, [pc, #268]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be4:	f7ff f85a 	bl	8000c9c <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff f856 	bl	8000c9c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e06e      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 020c 	and.w	r2, r3, #12
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d1eb      	bne.n	8001bec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d208      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	492b      	ldr	r1, [pc, #172]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c42:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d210      	bcs.n	8001c72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 0207 	bic.w	r2, r3, #7
 8001c58:	4923      	ldr	r1, [pc, #140]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c60:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e036      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d008      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	4918      	ldr	r1, [pc, #96]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d009      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4910      	ldr	r1, [pc, #64]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb0:	f000 f824 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	490b      	ldr	r1, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1fc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe ff91 	bl	8000bfc <HAL_InitTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cde:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08002860 	.word	0x08002860
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d14:	4b3b      	ldr	r3, [pc, #236]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x34>
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d121      	bne.n	8001d6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d11e      	bne.n	8001d6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d30:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e005      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d58:	4a2b      	ldr	r2, [pc, #172]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d102      	bne.n	8001d7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e004      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d134      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d003      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0xac>
 8001da0:	e005      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x110>)
 8001da4:	617b      	str	r3, [r7, #20]
      break;
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x114>)
 8001daa:	617b      	str	r3, [r7, #20]
      break;
 8001dac:	e002      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	617b      	str	r3, [r7, #20]
      break;
 8001db2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	fb03 f202 	mul.w	r2, r3, r2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	0e5b      	lsrs	r3, r3, #25
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	3301      	adds	r3, #1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001df4:	69bb      	ldr	r3, [r7, #24]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08002870 	.word	0x08002870
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e2c:	f7ff fa26 	bl	800127c <HAL_PWREx_GetVoltageRange>
 8001e30:	6178      	str	r0, [r7, #20]
 8001e32:	e014      	b.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e4c:	f7ff fa16 	bl	800127c <HAL_PWREx_GetVoltageRange>
 8001e50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e64:	d10b      	bne.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b80      	cmp	r3, #128	; 0x80
 8001e6a:	d919      	bls.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e70:	d902      	bls.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e72:	2302      	movs	r3, #2
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	e013      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e78:	2301      	movs	r3, #1
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e010      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	; 0x80
 8001e82:	d902      	bls.n	8001e8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e84:	2303      	movs	r3, #3
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	e00a      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b80      	cmp	r3, #128	; 0x80
 8001e8e:	d102      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e004      	b.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b70      	cmp	r3, #112	; 0x70
 8001e9a:	d101      	bne.n	8001ea0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 0207 	bic.w	r2, r3, #7
 8001ea8:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d001      	beq.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <__errno>:
 8001ed4:	4b01      	ldr	r3, [pc, #4]	; (8001edc <__errno+0x8>)
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <__libc_init_array>:
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	4d0d      	ldr	r5, [pc, #52]	; (8001f18 <__libc_init_array+0x38>)
 8001ee4:	4c0d      	ldr	r4, [pc, #52]	; (8001f1c <__libc_init_array+0x3c>)
 8001ee6:	1b64      	subs	r4, r4, r5
 8001ee8:	10a4      	asrs	r4, r4, #2
 8001eea:	2600      	movs	r6, #0
 8001eec:	42a6      	cmp	r6, r4
 8001eee:	d109      	bne.n	8001f04 <__libc_init_array+0x24>
 8001ef0:	4d0b      	ldr	r5, [pc, #44]	; (8001f20 <__libc_init_array+0x40>)
 8001ef2:	4c0c      	ldr	r4, [pc, #48]	; (8001f24 <__libc_init_array+0x44>)
 8001ef4:	f000 fc8e 	bl	8002814 <_init>
 8001ef8:	1b64      	subs	r4, r4, r5
 8001efa:	10a4      	asrs	r4, r4, #2
 8001efc:	2600      	movs	r6, #0
 8001efe:	42a6      	cmp	r6, r4
 8001f00:	d105      	bne.n	8001f0e <__libc_init_array+0x2e>
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
 8001f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f08:	4798      	blx	r3
 8001f0a:	3601      	adds	r6, #1
 8001f0c:	e7ee      	b.n	8001eec <__libc_init_array+0xc>
 8001f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f12:	4798      	blx	r3
 8001f14:	3601      	adds	r6, #1
 8001f16:	e7f2      	b.n	8001efe <__libc_init_array+0x1e>
 8001f18:	080028d4 	.word	0x080028d4
 8001f1c:	080028d4 	.word	0x080028d4
 8001f20:	080028d4 	.word	0x080028d4
 8001f24:	080028d8 	.word	0x080028d8

08001f28 <memset>:
 8001f28:	4402      	add	r2, r0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <memset+0xa>
 8001f30:	4770      	bx	lr
 8001f32:	f803 1b01 	strb.w	r1, [r3], #1
 8001f36:	e7f9      	b.n	8001f2c <memset+0x4>

08001f38 <siprintf>:
 8001f38:	b40e      	push	{r1, r2, r3}
 8001f3a:	b500      	push	{lr}
 8001f3c:	b09c      	sub	sp, #112	; 0x70
 8001f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8001f40:	9002      	str	r0, [sp, #8]
 8001f42:	9006      	str	r0, [sp, #24]
 8001f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <siprintf+0x38>)
 8001f4a:	9107      	str	r1, [sp, #28]
 8001f4c:	9104      	str	r1, [sp, #16]
 8001f4e:	4909      	ldr	r1, [pc, #36]	; (8001f74 <siprintf+0x3c>)
 8001f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f54:	9105      	str	r1, [sp, #20]
 8001f56:	6800      	ldr	r0, [r0, #0]
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	a902      	add	r1, sp, #8
 8001f5c:	f000 f868 	bl	8002030 <_svfiprintf_r>
 8001f60:	9b02      	ldr	r3, [sp, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	b01c      	add	sp, #112	; 0x70
 8001f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f6c:	b003      	add	sp, #12
 8001f6e:	4770      	bx	lr
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	ffff0208 	.word	0xffff0208

08001f78 <__ssputs_r>:
 8001f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f7c:	688e      	ldr	r6, [r1, #8]
 8001f7e:	429e      	cmp	r6, r3
 8001f80:	4682      	mov	sl, r0
 8001f82:	460c      	mov	r4, r1
 8001f84:	4690      	mov	r8, r2
 8001f86:	461f      	mov	r7, r3
 8001f88:	d838      	bhi.n	8001ffc <__ssputs_r+0x84>
 8001f8a:	898a      	ldrh	r2, [r1, #12]
 8001f8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f90:	d032      	beq.n	8001ff8 <__ssputs_r+0x80>
 8001f92:	6825      	ldr	r5, [r4, #0]
 8001f94:	6909      	ldr	r1, [r1, #16]
 8001f96:	eba5 0901 	sub.w	r9, r5, r1
 8001f9a:	6965      	ldr	r5, [r4, #20]
 8001f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	444b      	add	r3, r9
 8001fa8:	106d      	asrs	r5, r5, #1
 8001faa:	429d      	cmp	r5, r3
 8001fac:	bf38      	it	cc
 8001fae:	461d      	movcc	r5, r3
 8001fb0:	0553      	lsls	r3, r2, #21
 8001fb2:	d531      	bpl.n	8002018 <__ssputs_r+0xa0>
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f000 fb63 	bl	8002680 <_malloc_r>
 8001fba:	4606      	mov	r6, r0
 8001fbc:	b950      	cbnz	r0, 8001fd4 <__ssputs_r+0x5c>
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	f8ca 3000 	str.w	r3, [sl]
 8001fc4:	89a3      	ldrh	r3, [r4, #12]
 8001fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fca:	81a3      	strh	r3, [r4, #12]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd4:	6921      	ldr	r1, [r4, #16]
 8001fd6:	464a      	mov	r2, r9
 8001fd8:	f000 fabe 	bl	8002558 <memcpy>
 8001fdc:	89a3      	ldrh	r3, [r4, #12]
 8001fde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	6126      	str	r6, [r4, #16]
 8001fea:	6165      	str	r5, [r4, #20]
 8001fec:	444e      	add	r6, r9
 8001fee:	eba5 0509 	sub.w	r5, r5, r9
 8001ff2:	6026      	str	r6, [r4, #0]
 8001ff4:	60a5      	str	r5, [r4, #8]
 8001ff6:	463e      	mov	r6, r7
 8001ff8:	42be      	cmp	r6, r7
 8001ffa:	d900      	bls.n	8001ffe <__ssputs_r+0x86>
 8001ffc:	463e      	mov	r6, r7
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	4632      	mov	r2, r6
 8002002:	4641      	mov	r1, r8
 8002004:	f000 fab6 	bl	8002574 <memmove>
 8002008:	68a3      	ldr	r3, [r4, #8]
 800200a:	1b9b      	subs	r3, r3, r6
 800200c:	60a3      	str	r3, [r4, #8]
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	4433      	add	r3, r6
 8002012:	6023      	str	r3, [r4, #0]
 8002014:	2000      	movs	r0, #0
 8002016:	e7db      	b.n	8001fd0 <__ssputs_r+0x58>
 8002018:	462a      	mov	r2, r5
 800201a:	f000 fba5 	bl	8002768 <_realloc_r>
 800201e:	4606      	mov	r6, r0
 8002020:	2800      	cmp	r0, #0
 8002022:	d1e1      	bne.n	8001fe8 <__ssputs_r+0x70>
 8002024:	6921      	ldr	r1, [r4, #16]
 8002026:	4650      	mov	r0, sl
 8002028:	f000 fabe 	bl	80025a8 <_free_r>
 800202c:	e7c7      	b.n	8001fbe <__ssputs_r+0x46>
	...

08002030 <_svfiprintf_r>:
 8002030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002034:	4698      	mov	r8, r3
 8002036:	898b      	ldrh	r3, [r1, #12]
 8002038:	061b      	lsls	r3, r3, #24
 800203a:	b09d      	sub	sp, #116	; 0x74
 800203c:	4607      	mov	r7, r0
 800203e:	460d      	mov	r5, r1
 8002040:	4614      	mov	r4, r2
 8002042:	d50e      	bpl.n	8002062 <_svfiprintf_r+0x32>
 8002044:	690b      	ldr	r3, [r1, #16]
 8002046:	b963      	cbnz	r3, 8002062 <_svfiprintf_r+0x32>
 8002048:	2140      	movs	r1, #64	; 0x40
 800204a:	f000 fb19 	bl	8002680 <_malloc_r>
 800204e:	6028      	str	r0, [r5, #0]
 8002050:	6128      	str	r0, [r5, #16]
 8002052:	b920      	cbnz	r0, 800205e <_svfiprintf_r+0x2e>
 8002054:	230c      	movs	r3, #12
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	e0d1      	b.n	8002202 <_svfiprintf_r+0x1d2>
 800205e:	2340      	movs	r3, #64	; 0x40
 8002060:	616b      	str	r3, [r5, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	9309      	str	r3, [sp, #36]	; 0x24
 8002066:	2320      	movs	r3, #32
 8002068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800206c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002070:	2330      	movs	r3, #48	; 0x30
 8002072:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800221c <_svfiprintf_r+0x1ec>
 8002076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800207a:	f04f 0901 	mov.w	r9, #1
 800207e:	4623      	mov	r3, r4
 8002080:	469a      	mov	sl, r3
 8002082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002086:	b10a      	cbz	r2, 800208c <_svfiprintf_r+0x5c>
 8002088:	2a25      	cmp	r2, #37	; 0x25
 800208a:	d1f9      	bne.n	8002080 <_svfiprintf_r+0x50>
 800208c:	ebba 0b04 	subs.w	fp, sl, r4
 8002090:	d00b      	beq.n	80020aa <_svfiprintf_r+0x7a>
 8002092:	465b      	mov	r3, fp
 8002094:	4622      	mov	r2, r4
 8002096:	4629      	mov	r1, r5
 8002098:	4638      	mov	r0, r7
 800209a:	f7ff ff6d 	bl	8001f78 <__ssputs_r>
 800209e:	3001      	adds	r0, #1
 80020a0:	f000 80aa 	beq.w	80021f8 <_svfiprintf_r+0x1c8>
 80020a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020a6:	445a      	add	r2, fp
 80020a8:	9209      	str	r2, [sp, #36]	; 0x24
 80020aa:	f89a 3000 	ldrb.w	r3, [sl]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a2 	beq.w	80021f8 <_svfiprintf_r+0x1c8>
 80020b4:	2300      	movs	r3, #0
 80020b6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020be:	f10a 0a01 	add.w	sl, sl, #1
 80020c2:	9304      	str	r3, [sp, #16]
 80020c4:	9307      	str	r3, [sp, #28]
 80020c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020ca:	931a      	str	r3, [sp, #104]	; 0x68
 80020cc:	4654      	mov	r4, sl
 80020ce:	2205      	movs	r2, #5
 80020d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020d4:	4851      	ldr	r0, [pc, #324]	; (800221c <_svfiprintf_r+0x1ec>)
 80020d6:	f7fe f883 	bl	80001e0 <memchr>
 80020da:	9a04      	ldr	r2, [sp, #16]
 80020dc:	b9d8      	cbnz	r0, 8002116 <_svfiprintf_r+0xe6>
 80020de:	06d0      	lsls	r0, r2, #27
 80020e0:	bf44      	itt	mi
 80020e2:	2320      	movmi	r3, #32
 80020e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020e8:	0711      	lsls	r1, r2, #28
 80020ea:	bf44      	itt	mi
 80020ec:	232b      	movmi	r3, #43	; 0x2b
 80020ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80020f2:	f89a 3000 	ldrb.w	r3, [sl]
 80020f6:	2b2a      	cmp	r3, #42	; 0x2a
 80020f8:	d015      	beq.n	8002126 <_svfiprintf_r+0xf6>
 80020fa:	9a07      	ldr	r2, [sp, #28]
 80020fc:	4654      	mov	r4, sl
 80020fe:	2000      	movs	r0, #0
 8002100:	f04f 0c0a 	mov.w	ip, #10
 8002104:	4621      	mov	r1, r4
 8002106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800210a:	3b30      	subs	r3, #48	; 0x30
 800210c:	2b09      	cmp	r3, #9
 800210e:	d94e      	bls.n	80021ae <_svfiprintf_r+0x17e>
 8002110:	b1b0      	cbz	r0, 8002140 <_svfiprintf_r+0x110>
 8002112:	9207      	str	r2, [sp, #28]
 8002114:	e014      	b.n	8002140 <_svfiprintf_r+0x110>
 8002116:	eba0 0308 	sub.w	r3, r0, r8
 800211a:	fa09 f303 	lsl.w	r3, r9, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	9304      	str	r3, [sp, #16]
 8002122:	46a2      	mov	sl, r4
 8002124:	e7d2      	b.n	80020cc <_svfiprintf_r+0x9c>
 8002126:	9b03      	ldr	r3, [sp, #12]
 8002128:	1d19      	adds	r1, r3, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	9103      	str	r1, [sp, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	bfbb      	ittet	lt
 8002132:	425b      	neglt	r3, r3
 8002134:	f042 0202 	orrlt.w	r2, r2, #2
 8002138:	9307      	strge	r3, [sp, #28]
 800213a:	9307      	strlt	r3, [sp, #28]
 800213c:	bfb8      	it	lt
 800213e:	9204      	strlt	r2, [sp, #16]
 8002140:	7823      	ldrb	r3, [r4, #0]
 8002142:	2b2e      	cmp	r3, #46	; 0x2e
 8002144:	d10c      	bne.n	8002160 <_svfiprintf_r+0x130>
 8002146:	7863      	ldrb	r3, [r4, #1]
 8002148:	2b2a      	cmp	r3, #42	; 0x2a
 800214a:	d135      	bne.n	80021b8 <_svfiprintf_r+0x188>
 800214c:	9b03      	ldr	r3, [sp, #12]
 800214e:	1d1a      	adds	r2, r3, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	9203      	str	r2, [sp, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	bfb8      	it	lt
 8002158:	f04f 33ff 	movlt.w	r3, #4294967295
 800215c:	3402      	adds	r4, #2
 800215e:	9305      	str	r3, [sp, #20]
 8002160:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800222c <_svfiprintf_r+0x1fc>
 8002164:	7821      	ldrb	r1, [r4, #0]
 8002166:	2203      	movs	r2, #3
 8002168:	4650      	mov	r0, sl
 800216a:	f7fe f839 	bl	80001e0 <memchr>
 800216e:	b140      	cbz	r0, 8002182 <_svfiprintf_r+0x152>
 8002170:	2340      	movs	r3, #64	; 0x40
 8002172:	eba0 000a 	sub.w	r0, r0, sl
 8002176:	fa03 f000 	lsl.w	r0, r3, r0
 800217a:	9b04      	ldr	r3, [sp, #16]
 800217c:	4303      	orrs	r3, r0
 800217e:	3401      	adds	r4, #1
 8002180:	9304      	str	r3, [sp, #16]
 8002182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002186:	4826      	ldr	r0, [pc, #152]	; (8002220 <_svfiprintf_r+0x1f0>)
 8002188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800218c:	2206      	movs	r2, #6
 800218e:	f7fe f827 	bl	80001e0 <memchr>
 8002192:	2800      	cmp	r0, #0
 8002194:	d038      	beq.n	8002208 <_svfiprintf_r+0x1d8>
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <_svfiprintf_r+0x1f4>)
 8002198:	bb1b      	cbnz	r3, 80021e2 <_svfiprintf_r+0x1b2>
 800219a:	9b03      	ldr	r3, [sp, #12]
 800219c:	3307      	adds	r3, #7
 800219e:	f023 0307 	bic.w	r3, r3, #7
 80021a2:	3308      	adds	r3, #8
 80021a4:	9303      	str	r3, [sp, #12]
 80021a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021a8:	4433      	add	r3, r6
 80021aa:	9309      	str	r3, [sp, #36]	; 0x24
 80021ac:	e767      	b.n	800207e <_svfiprintf_r+0x4e>
 80021ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80021b2:	460c      	mov	r4, r1
 80021b4:	2001      	movs	r0, #1
 80021b6:	e7a5      	b.n	8002104 <_svfiprintf_r+0xd4>
 80021b8:	2300      	movs	r3, #0
 80021ba:	3401      	adds	r4, #1
 80021bc:	9305      	str	r3, [sp, #20]
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 0c0a 	mov.w	ip, #10
 80021c4:	4620      	mov	r0, r4
 80021c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021ca:	3a30      	subs	r2, #48	; 0x30
 80021cc:	2a09      	cmp	r2, #9
 80021ce:	d903      	bls.n	80021d8 <_svfiprintf_r+0x1a8>
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0c5      	beq.n	8002160 <_svfiprintf_r+0x130>
 80021d4:	9105      	str	r1, [sp, #20]
 80021d6:	e7c3      	b.n	8002160 <_svfiprintf_r+0x130>
 80021d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80021dc:	4604      	mov	r4, r0
 80021de:	2301      	movs	r3, #1
 80021e0:	e7f0      	b.n	80021c4 <_svfiprintf_r+0x194>
 80021e2:	ab03      	add	r3, sp, #12
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	462a      	mov	r2, r5
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <_svfiprintf_r+0x1f8>)
 80021ea:	a904      	add	r1, sp, #16
 80021ec:	4638      	mov	r0, r7
 80021ee:	f3af 8000 	nop.w
 80021f2:	1c42      	adds	r2, r0, #1
 80021f4:	4606      	mov	r6, r0
 80021f6:	d1d6      	bne.n	80021a6 <_svfiprintf_r+0x176>
 80021f8:	89ab      	ldrh	r3, [r5, #12]
 80021fa:	065b      	lsls	r3, r3, #25
 80021fc:	f53f af2c 	bmi.w	8002058 <_svfiprintf_r+0x28>
 8002200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002202:	b01d      	add	sp, #116	; 0x74
 8002204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002208:	ab03      	add	r3, sp, #12
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	462a      	mov	r2, r5
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <_svfiprintf_r+0x1f8>)
 8002210:	a904      	add	r1, sp, #16
 8002212:	4638      	mov	r0, r7
 8002214:	f000 f87a 	bl	800230c <_printf_i>
 8002218:	e7eb      	b.n	80021f2 <_svfiprintf_r+0x1c2>
 800221a:	bf00      	nop
 800221c:	080028a0 	.word	0x080028a0
 8002220:	080028aa 	.word	0x080028aa
 8002224:	00000000 	.word	0x00000000
 8002228:	08001f79 	.word	0x08001f79
 800222c:	080028a6 	.word	0x080028a6

08002230 <_printf_common>:
 8002230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002234:	4616      	mov	r6, r2
 8002236:	4699      	mov	r9, r3
 8002238:	688a      	ldr	r2, [r1, #8]
 800223a:	690b      	ldr	r3, [r1, #16]
 800223c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002240:	4293      	cmp	r3, r2
 8002242:	bfb8      	it	lt
 8002244:	4613      	movlt	r3, r2
 8002246:	6033      	str	r3, [r6, #0]
 8002248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800224c:	4607      	mov	r7, r0
 800224e:	460c      	mov	r4, r1
 8002250:	b10a      	cbz	r2, 8002256 <_printf_common+0x26>
 8002252:	3301      	adds	r3, #1
 8002254:	6033      	str	r3, [r6, #0]
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	0699      	lsls	r1, r3, #26
 800225a:	bf42      	ittt	mi
 800225c:	6833      	ldrmi	r3, [r6, #0]
 800225e:	3302      	addmi	r3, #2
 8002260:	6033      	strmi	r3, [r6, #0]
 8002262:	6825      	ldr	r5, [r4, #0]
 8002264:	f015 0506 	ands.w	r5, r5, #6
 8002268:	d106      	bne.n	8002278 <_printf_common+0x48>
 800226a:	f104 0a19 	add.w	sl, r4, #25
 800226e:	68e3      	ldr	r3, [r4, #12]
 8002270:	6832      	ldr	r2, [r6, #0]
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	42ab      	cmp	r3, r5
 8002276:	dc26      	bgt.n	80022c6 <_printf_common+0x96>
 8002278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800227c:	1e13      	subs	r3, r2, #0
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	bf18      	it	ne
 8002282:	2301      	movne	r3, #1
 8002284:	0692      	lsls	r2, r2, #26
 8002286:	d42b      	bmi.n	80022e0 <_printf_common+0xb0>
 8002288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800228c:	4649      	mov	r1, r9
 800228e:	4638      	mov	r0, r7
 8002290:	47c0      	blx	r8
 8002292:	3001      	adds	r0, #1
 8002294:	d01e      	beq.n	80022d4 <_printf_common+0xa4>
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	68e5      	ldr	r5, [r4, #12]
 800229a:	6832      	ldr	r2, [r6, #0]
 800229c:	f003 0306 	and.w	r3, r3, #6
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	bf08      	it	eq
 80022a4:	1aad      	subeq	r5, r5, r2
 80022a6:	68a3      	ldr	r3, [r4, #8]
 80022a8:	6922      	ldr	r2, [r4, #16]
 80022aa:	bf0c      	ite	eq
 80022ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022b0:	2500      	movne	r5, #0
 80022b2:	4293      	cmp	r3, r2
 80022b4:	bfc4      	itt	gt
 80022b6:	1a9b      	subgt	r3, r3, r2
 80022b8:	18ed      	addgt	r5, r5, r3
 80022ba:	2600      	movs	r6, #0
 80022bc:	341a      	adds	r4, #26
 80022be:	42b5      	cmp	r5, r6
 80022c0:	d11a      	bne.n	80022f8 <_printf_common+0xc8>
 80022c2:	2000      	movs	r0, #0
 80022c4:	e008      	b.n	80022d8 <_printf_common+0xa8>
 80022c6:	2301      	movs	r3, #1
 80022c8:	4652      	mov	r2, sl
 80022ca:	4649      	mov	r1, r9
 80022cc:	4638      	mov	r0, r7
 80022ce:	47c0      	blx	r8
 80022d0:	3001      	adds	r0, #1
 80022d2:	d103      	bne.n	80022dc <_printf_common+0xac>
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022dc:	3501      	adds	r5, #1
 80022de:	e7c6      	b.n	800226e <_printf_common+0x3e>
 80022e0:	18e1      	adds	r1, r4, r3
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	2030      	movs	r0, #48	; 0x30
 80022e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022ea:	4422      	add	r2, r4
 80022ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022f4:	3302      	adds	r3, #2
 80022f6:	e7c7      	b.n	8002288 <_printf_common+0x58>
 80022f8:	2301      	movs	r3, #1
 80022fa:	4622      	mov	r2, r4
 80022fc:	4649      	mov	r1, r9
 80022fe:	4638      	mov	r0, r7
 8002300:	47c0      	blx	r8
 8002302:	3001      	adds	r0, #1
 8002304:	d0e6      	beq.n	80022d4 <_printf_common+0xa4>
 8002306:	3601      	adds	r6, #1
 8002308:	e7d9      	b.n	80022be <_printf_common+0x8e>
	...

0800230c <_printf_i>:
 800230c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002310:	7e0f      	ldrb	r7, [r1, #24]
 8002312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002314:	2f78      	cmp	r7, #120	; 0x78
 8002316:	4691      	mov	r9, r2
 8002318:	4680      	mov	r8, r0
 800231a:	460c      	mov	r4, r1
 800231c:	469a      	mov	sl, r3
 800231e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002322:	d807      	bhi.n	8002334 <_printf_i+0x28>
 8002324:	2f62      	cmp	r7, #98	; 0x62
 8002326:	d80a      	bhi.n	800233e <_printf_i+0x32>
 8002328:	2f00      	cmp	r7, #0
 800232a:	f000 80d8 	beq.w	80024de <_printf_i+0x1d2>
 800232e:	2f58      	cmp	r7, #88	; 0x58
 8002330:	f000 80a3 	beq.w	800247a <_printf_i+0x16e>
 8002334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800233c:	e03a      	b.n	80023b4 <_printf_i+0xa8>
 800233e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002342:	2b15      	cmp	r3, #21
 8002344:	d8f6      	bhi.n	8002334 <_printf_i+0x28>
 8002346:	a101      	add	r1, pc, #4	; (adr r1, 800234c <_printf_i+0x40>)
 8002348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800234c:	080023a5 	.word	0x080023a5
 8002350:	080023b9 	.word	0x080023b9
 8002354:	08002335 	.word	0x08002335
 8002358:	08002335 	.word	0x08002335
 800235c:	08002335 	.word	0x08002335
 8002360:	08002335 	.word	0x08002335
 8002364:	080023b9 	.word	0x080023b9
 8002368:	08002335 	.word	0x08002335
 800236c:	08002335 	.word	0x08002335
 8002370:	08002335 	.word	0x08002335
 8002374:	08002335 	.word	0x08002335
 8002378:	080024c5 	.word	0x080024c5
 800237c:	080023e9 	.word	0x080023e9
 8002380:	080024a7 	.word	0x080024a7
 8002384:	08002335 	.word	0x08002335
 8002388:	08002335 	.word	0x08002335
 800238c:	080024e7 	.word	0x080024e7
 8002390:	08002335 	.word	0x08002335
 8002394:	080023e9 	.word	0x080023e9
 8002398:	08002335 	.word	0x08002335
 800239c:	08002335 	.word	0x08002335
 80023a0:	080024af 	.word	0x080024af
 80023a4:	682b      	ldr	r3, [r5, #0]
 80023a6:	1d1a      	adds	r2, r3, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	602a      	str	r2, [r5, #0]
 80023ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0a3      	b.n	8002500 <_printf_i+0x1f4>
 80023b8:	6820      	ldr	r0, [r4, #0]
 80023ba:	6829      	ldr	r1, [r5, #0]
 80023bc:	0606      	lsls	r6, r0, #24
 80023be:	f101 0304 	add.w	r3, r1, #4
 80023c2:	d50a      	bpl.n	80023da <_printf_i+0xce>
 80023c4:	680e      	ldr	r6, [r1, #0]
 80023c6:	602b      	str	r3, [r5, #0]
 80023c8:	2e00      	cmp	r6, #0
 80023ca:	da03      	bge.n	80023d4 <_printf_i+0xc8>
 80023cc:	232d      	movs	r3, #45	; 0x2d
 80023ce:	4276      	negs	r6, r6
 80023d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023d4:	485e      	ldr	r0, [pc, #376]	; (8002550 <_printf_i+0x244>)
 80023d6:	230a      	movs	r3, #10
 80023d8:	e019      	b.n	800240e <_printf_i+0x102>
 80023da:	680e      	ldr	r6, [r1, #0]
 80023dc:	602b      	str	r3, [r5, #0]
 80023de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023e2:	bf18      	it	ne
 80023e4:	b236      	sxthne	r6, r6
 80023e6:	e7ef      	b.n	80023c8 <_printf_i+0xbc>
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	1d19      	adds	r1, r3, #4
 80023ee:	6029      	str	r1, [r5, #0]
 80023f0:	0601      	lsls	r1, r0, #24
 80023f2:	d501      	bpl.n	80023f8 <_printf_i+0xec>
 80023f4:	681e      	ldr	r6, [r3, #0]
 80023f6:	e002      	b.n	80023fe <_printf_i+0xf2>
 80023f8:	0646      	lsls	r6, r0, #25
 80023fa:	d5fb      	bpl.n	80023f4 <_printf_i+0xe8>
 80023fc:	881e      	ldrh	r6, [r3, #0]
 80023fe:	4854      	ldr	r0, [pc, #336]	; (8002550 <_printf_i+0x244>)
 8002400:	2f6f      	cmp	r7, #111	; 0x6f
 8002402:	bf0c      	ite	eq
 8002404:	2308      	moveq	r3, #8
 8002406:	230a      	movne	r3, #10
 8002408:	2100      	movs	r1, #0
 800240a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800240e:	6865      	ldr	r5, [r4, #4]
 8002410:	60a5      	str	r5, [r4, #8]
 8002412:	2d00      	cmp	r5, #0
 8002414:	bfa2      	ittt	ge
 8002416:	6821      	ldrge	r1, [r4, #0]
 8002418:	f021 0104 	bicge.w	r1, r1, #4
 800241c:	6021      	strge	r1, [r4, #0]
 800241e:	b90e      	cbnz	r6, 8002424 <_printf_i+0x118>
 8002420:	2d00      	cmp	r5, #0
 8002422:	d04d      	beq.n	80024c0 <_printf_i+0x1b4>
 8002424:	4615      	mov	r5, r2
 8002426:	fbb6 f1f3 	udiv	r1, r6, r3
 800242a:	fb03 6711 	mls	r7, r3, r1, r6
 800242e:	5dc7      	ldrb	r7, [r0, r7]
 8002430:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002434:	4637      	mov	r7, r6
 8002436:	42bb      	cmp	r3, r7
 8002438:	460e      	mov	r6, r1
 800243a:	d9f4      	bls.n	8002426 <_printf_i+0x11a>
 800243c:	2b08      	cmp	r3, #8
 800243e:	d10b      	bne.n	8002458 <_printf_i+0x14c>
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	07de      	lsls	r6, r3, #31
 8002444:	d508      	bpl.n	8002458 <_printf_i+0x14c>
 8002446:	6923      	ldr	r3, [r4, #16]
 8002448:	6861      	ldr	r1, [r4, #4]
 800244a:	4299      	cmp	r1, r3
 800244c:	bfde      	ittt	le
 800244e:	2330      	movle	r3, #48	; 0x30
 8002450:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002454:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002458:	1b52      	subs	r2, r2, r5
 800245a:	6122      	str	r2, [r4, #16]
 800245c:	f8cd a000 	str.w	sl, [sp]
 8002460:	464b      	mov	r3, r9
 8002462:	aa03      	add	r2, sp, #12
 8002464:	4621      	mov	r1, r4
 8002466:	4640      	mov	r0, r8
 8002468:	f7ff fee2 	bl	8002230 <_printf_common>
 800246c:	3001      	adds	r0, #1
 800246e:	d14c      	bne.n	800250a <_printf_i+0x1fe>
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	b004      	add	sp, #16
 8002476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247a:	4835      	ldr	r0, [pc, #212]	; (8002550 <_printf_i+0x244>)
 800247c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002480:	6829      	ldr	r1, [r5, #0]
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	f851 6b04 	ldr.w	r6, [r1], #4
 8002488:	6029      	str	r1, [r5, #0]
 800248a:	061d      	lsls	r5, r3, #24
 800248c:	d514      	bpl.n	80024b8 <_printf_i+0x1ac>
 800248e:	07df      	lsls	r7, r3, #31
 8002490:	bf44      	itt	mi
 8002492:	f043 0320 	orrmi.w	r3, r3, #32
 8002496:	6023      	strmi	r3, [r4, #0]
 8002498:	b91e      	cbnz	r6, 80024a2 <_printf_i+0x196>
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	f023 0320 	bic.w	r3, r3, #32
 80024a0:	6023      	str	r3, [r4, #0]
 80024a2:	2310      	movs	r3, #16
 80024a4:	e7b0      	b.n	8002408 <_printf_i+0xfc>
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	f043 0320 	orr.w	r3, r3, #32
 80024ac:	6023      	str	r3, [r4, #0]
 80024ae:	2378      	movs	r3, #120	; 0x78
 80024b0:	4828      	ldr	r0, [pc, #160]	; (8002554 <_printf_i+0x248>)
 80024b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024b6:	e7e3      	b.n	8002480 <_printf_i+0x174>
 80024b8:	0659      	lsls	r1, r3, #25
 80024ba:	bf48      	it	mi
 80024bc:	b2b6      	uxthmi	r6, r6
 80024be:	e7e6      	b.n	800248e <_printf_i+0x182>
 80024c0:	4615      	mov	r5, r2
 80024c2:	e7bb      	b.n	800243c <_printf_i+0x130>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	6826      	ldr	r6, [r4, #0]
 80024c8:	6961      	ldr	r1, [r4, #20]
 80024ca:	1d18      	adds	r0, r3, #4
 80024cc:	6028      	str	r0, [r5, #0]
 80024ce:	0635      	lsls	r5, r6, #24
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	d501      	bpl.n	80024d8 <_printf_i+0x1cc>
 80024d4:	6019      	str	r1, [r3, #0]
 80024d6:	e002      	b.n	80024de <_printf_i+0x1d2>
 80024d8:	0670      	lsls	r0, r6, #25
 80024da:	d5fb      	bpl.n	80024d4 <_printf_i+0x1c8>
 80024dc:	8019      	strh	r1, [r3, #0]
 80024de:	2300      	movs	r3, #0
 80024e0:	6123      	str	r3, [r4, #16]
 80024e2:	4615      	mov	r5, r2
 80024e4:	e7ba      	b.n	800245c <_printf_i+0x150>
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	1d1a      	adds	r2, r3, #4
 80024ea:	602a      	str	r2, [r5, #0]
 80024ec:	681d      	ldr	r5, [r3, #0]
 80024ee:	6862      	ldr	r2, [r4, #4]
 80024f0:	2100      	movs	r1, #0
 80024f2:	4628      	mov	r0, r5
 80024f4:	f7fd fe74 	bl	80001e0 <memchr>
 80024f8:	b108      	cbz	r0, 80024fe <_printf_i+0x1f2>
 80024fa:	1b40      	subs	r0, r0, r5
 80024fc:	6060      	str	r0, [r4, #4]
 80024fe:	6863      	ldr	r3, [r4, #4]
 8002500:	6123      	str	r3, [r4, #16]
 8002502:	2300      	movs	r3, #0
 8002504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002508:	e7a8      	b.n	800245c <_printf_i+0x150>
 800250a:	6923      	ldr	r3, [r4, #16]
 800250c:	462a      	mov	r2, r5
 800250e:	4649      	mov	r1, r9
 8002510:	4640      	mov	r0, r8
 8002512:	47d0      	blx	sl
 8002514:	3001      	adds	r0, #1
 8002516:	d0ab      	beq.n	8002470 <_printf_i+0x164>
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	079b      	lsls	r3, r3, #30
 800251c:	d413      	bmi.n	8002546 <_printf_i+0x23a>
 800251e:	68e0      	ldr	r0, [r4, #12]
 8002520:	9b03      	ldr	r3, [sp, #12]
 8002522:	4298      	cmp	r0, r3
 8002524:	bfb8      	it	lt
 8002526:	4618      	movlt	r0, r3
 8002528:	e7a4      	b.n	8002474 <_printf_i+0x168>
 800252a:	2301      	movs	r3, #1
 800252c:	4632      	mov	r2, r6
 800252e:	4649      	mov	r1, r9
 8002530:	4640      	mov	r0, r8
 8002532:	47d0      	blx	sl
 8002534:	3001      	adds	r0, #1
 8002536:	d09b      	beq.n	8002470 <_printf_i+0x164>
 8002538:	3501      	adds	r5, #1
 800253a:	68e3      	ldr	r3, [r4, #12]
 800253c:	9903      	ldr	r1, [sp, #12]
 800253e:	1a5b      	subs	r3, r3, r1
 8002540:	42ab      	cmp	r3, r5
 8002542:	dcf2      	bgt.n	800252a <_printf_i+0x21e>
 8002544:	e7eb      	b.n	800251e <_printf_i+0x212>
 8002546:	2500      	movs	r5, #0
 8002548:	f104 0619 	add.w	r6, r4, #25
 800254c:	e7f5      	b.n	800253a <_printf_i+0x22e>
 800254e:	bf00      	nop
 8002550:	080028b1 	.word	0x080028b1
 8002554:	080028c2 	.word	0x080028c2

08002558 <memcpy>:
 8002558:	440a      	add	r2, r1
 800255a:	4291      	cmp	r1, r2
 800255c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002560:	d100      	bne.n	8002564 <memcpy+0xc>
 8002562:	4770      	bx	lr
 8002564:	b510      	push	{r4, lr}
 8002566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800256a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800256e:	4291      	cmp	r1, r2
 8002570:	d1f9      	bne.n	8002566 <memcpy+0xe>
 8002572:	bd10      	pop	{r4, pc}

08002574 <memmove>:
 8002574:	4288      	cmp	r0, r1
 8002576:	b510      	push	{r4, lr}
 8002578:	eb01 0402 	add.w	r4, r1, r2
 800257c:	d902      	bls.n	8002584 <memmove+0x10>
 800257e:	4284      	cmp	r4, r0
 8002580:	4623      	mov	r3, r4
 8002582:	d807      	bhi.n	8002594 <memmove+0x20>
 8002584:	1e43      	subs	r3, r0, #1
 8002586:	42a1      	cmp	r1, r4
 8002588:	d008      	beq.n	800259c <memmove+0x28>
 800258a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800258e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002592:	e7f8      	b.n	8002586 <memmove+0x12>
 8002594:	4402      	add	r2, r0
 8002596:	4601      	mov	r1, r0
 8002598:	428a      	cmp	r2, r1
 800259a:	d100      	bne.n	800259e <memmove+0x2a>
 800259c:	bd10      	pop	{r4, pc}
 800259e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025a6:	e7f7      	b.n	8002598 <memmove+0x24>

080025a8 <_free_r>:
 80025a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025aa:	2900      	cmp	r1, #0
 80025ac:	d044      	beq.n	8002638 <_free_r+0x90>
 80025ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b2:	9001      	str	r0, [sp, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f1a1 0404 	sub.w	r4, r1, #4
 80025ba:	bfb8      	it	lt
 80025bc:	18e4      	addlt	r4, r4, r3
 80025be:	f000 f913 	bl	80027e8 <__malloc_lock>
 80025c2:	4a1e      	ldr	r2, [pc, #120]	; (800263c <_free_r+0x94>)
 80025c4:	9801      	ldr	r0, [sp, #4]
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	b933      	cbnz	r3, 80025d8 <_free_r+0x30>
 80025ca:	6063      	str	r3, [r4, #4]
 80025cc:	6014      	str	r4, [r2, #0]
 80025ce:	b003      	add	sp, #12
 80025d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025d4:	f000 b90e 	b.w	80027f4 <__malloc_unlock>
 80025d8:	42a3      	cmp	r3, r4
 80025da:	d908      	bls.n	80025ee <_free_r+0x46>
 80025dc:	6825      	ldr	r5, [r4, #0]
 80025de:	1961      	adds	r1, r4, r5
 80025e0:	428b      	cmp	r3, r1
 80025e2:	bf01      	itttt	eq
 80025e4:	6819      	ldreq	r1, [r3, #0]
 80025e6:	685b      	ldreq	r3, [r3, #4]
 80025e8:	1949      	addeq	r1, r1, r5
 80025ea:	6021      	streq	r1, [r4, #0]
 80025ec:	e7ed      	b.n	80025ca <_free_r+0x22>
 80025ee:	461a      	mov	r2, r3
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b10b      	cbz	r3, 80025f8 <_free_r+0x50>
 80025f4:	42a3      	cmp	r3, r4
 80025f6:	d9fa      	bls.n	80025ee <_free_r+0x46>
 80025f8:	6811      	ldr	r1, [r2, #0]
 80025fa:	1855      	adds	r5, r2, r1
 80025fc:	42a5      	cmp	r5, r4
 80025fe:	d10b      	bne.n	8002618 <_free_r+0x70>
 8002600:	6824      	ldr	r4, [r4, #0]
 8002602:	4421      	add	r1, r4
 8002604:	1854      	adds	r4, r2, r1
 8002606:	42a3      	cmp	r3, r4
 8002608:	6011      	str	r1, [r2, #0]
 800260a:	d1e0      	bne.n	80025ce <_free_r+0x26>
 800260c:	681c      	ldr	r4, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	6053      	str	r3, [r2, #4]
 8002612:	4421      	add	r1, r4
 8002614:	6011      	str	r1, [r2, #0]
 8002616:	e7da      	b.n	80025ce <_free_r+0x26>
 8002618:	d902      	bls.n	8002620 <_free_r+0x78>
 800261a:	230c      	movs	r3, #12
 800261c:	6003      	str	r3, [r0, #0]
 800261e:	e7d6      	b.n	80025ce <_free_r+0x26>
 8002620:	6825      	ldr	r5, [r4, #0]
 8002622:	1961      	adds	r1, r4, r5
 8002624:	428b      	cmp	r3, r1
 8002626:	bf04      	itt	eq
 8002628:	6819      	ldreq	r1, [r3, #0]
 800262a:	685b      	ldreq	r3, [r3, #4]
 800262c:	6063      	str	r3, [r4, #4]
 800262e:	bf04      	itt	eq
 8002630:	1949      	addeq	r1, r1, r5
 8002632:	6021      	streq	r1, [r4, #0]
 8002634:	6054      	str	r4, [r2, #4]
 8002636:	e7ca      	b.n	80025ce <_free_r+0x26>
 8002638:	b003      	add	sp, #12
 800263a:	bd30      	pop	{r4, r5, pc}
 800263c:	20000094 	.word	0x20000094

08002640 <sbrk_aligned>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	4e0e      	ldr	r6, [pc, #56]	; (800267c <sbrk_aligned+0x3c>)
 8002644:	460c      	mov	r4, r1
 8002646:	6831      	ldr	r1, [r6, #0]
 8002648:	4605      	mov	r5, r0
 800264a:	b911      	cbnz	r1, 8002652 <sbrk_aligned+0x12>
 800264c:	f000 f8bc 	bl	80027c8 <_sbrk_r>
 8002650:	6030      	str	r0, [r6, #0]
 8002652:	4621      	mov	r1, r4
 8002654:	4628      	mov	r0, r5
 8002656:	f000 f8b7 	bl	80027c8 <_sbrk_r>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d00a      	beq.n	8002674 <sbrk_aligned+0x34>
 800265e:	1cc4      	adds	r4, r0, #3
 8002660:	f024 0403 	bic.w	r4, r4, #3
 8002664:	42a0      	cmp	r0, r4
 8002666:	d007      	beq.n	8002678 <sbrk_aligned+0x38>
 8002668:	1a21      	subs	r1, r4, r0
 800266a:	4628      	mov	r0, r5
 800266c:	f000 f8ac 	bl	80027c8 <_sbrk_r>
 8002670:	3001      	adds	r0, #1
 8002672:	d101      	bne.n	8002678 <sbrk_aligned+0x38>
 8002674:	f04f 34ff 	mov.w	r4, #4294967295
 8002678:	4620      	mov	r0, r4
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	20000098 	.word	0x20000098

08002680 <_malloc_r>:
 8002680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002684:	1ccd      	adds	r5, r1, #3
 8002686:	f025 0503 	bic.w	r5, r5, #3
 800268a:	3508      	adds	r5, #8
 800268c:	2d0c      	cmp	r5, #12
 800268e:	bf38      	it	cc
 8002690:	250c      	movcc	r5, #12
 8002692:	2d00      	cmp	r5, #0
 8002694:	4607      	mov	r7, r0
 8002696:	db01      	blt.n	800269c <_malloc_r+0x1c>
 8002698:	42a9      	cmp	r1, r5
 800269a:	d905      	bls.n	80026a8 <_malloc_r+0x28>
 800269c:	230c      	movs	r3, #12
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	2600      	movs	r6, #0
 80026a2:	4630      	mov	r0, r6
 80026a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026a8:	4e2e      	ldr	r6, [pc, #184]	; (8002764 <_malloc_r+0xe4>)
 80026aa:	f000 f89d 	bl	80027e8 <__malloc_lock>
 80026ae:	6833      	ldr	r3, [r6, #0]
 80026b0:	461c      	mov	r4, r3
 80026b2:	bb34      	cbnz	r4, 8002702 <_malloc_r+0x82>
 80026b4:	4629      	mov	r1, r5
 80026b6:	4638      	mov	r0, r7
 80026b8:	f7ff ffc2 	bl	8002640 <sbrk_aligned>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	4604      	mov	r4, r0
 80026c0:	d14d      	bne.n	800275e <_malloc_r+0xde>
 80026c2:	6834      	ldr	r4, [r6, #0]
 80026c4:	4626      	mov	r6, r4
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	d140      	bne.n	800274c <_malloc_r+0xcc>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	4631      	mov	r1, r6
 80026ce:	4638      	mov	r0, r7
 80026d0:	eb04 0803 	add.w	r8, r4, r3
 80026d4:	f000 f878 	bl	80027c8 <_sbrk_r>
 80026d8:	4580      	cmp	r8, r0
 80026da:	d13a      	bne.n	8002752 <_malloc_r+0xd2>
 80026dc:	6821      	ldr	r1, [r4, #0]
 80026de:	3503      	adds	r5, #3
 80026e0:	1a6d      	subs	r5, r5, r1
 80026e2:	f025 0503 	bic.w	r5, r5, #3
 80026e6:	3508      	adds	r5, #8
 80026e8:	2d0c      	cmp	r5, #12
 80026ea:	bf38      	it	cc
 80026ec:	250c      	movcc	r5, #12
 80026ee:	4629      	mov	r1, r5
 80026f0:	4638      	mov	r0, r7
 80026f2:	f7ff ffa5 	bl	8002640 <sbrk_aligned>
 80026f6:	3001      	adds	r0, #1
 80026f8:	d02b      	beq.n	8002752 <_malloc_r+0xd2>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	442b      	add	r3, r5
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	e00e      	b.n	8002720 <_malloc_r+0xa0>
 8002702:	6822      	ldr	r2, [r4, #0]
 8002704:	1b52      	subs	r2, r2, r5
 8002706:	d41e      	bmi.n	8002746 <_malloc_r+0xc6>
 8002708:	2a0b      	cmp	r2, #11
 800270a:	d916      	bls.n	800273a <_malloc_r+0xba>
 800270c:	1961      	adds	r1, r4, r5
 800270e:	42a3      	cmp	r3, r4
 8002710:	6025      	str	r5, [r4, #0]
 8002712:	bf18      	it	ne
 8002714:	6059      	strne	r1, [r3, #4]
 8002716:	6863      	ldr	r3, [r4, #4]
 8002718:	bf08      	it	eq
 800271a:	6031      	streq	r1, [r6, #0]
 800271c:	5162      	str	r2, [r4, r5]
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	4638      	mov	r0, r7
 8002722:	f104 060b 	add.w	r6, r4, #11
 8002726:	f000 f865 	bl	80027f4 <__malloc_unlock>
 800272a:	f026 0607 	bic.w	r6, r6, #7
 800272e:	1d23      	adds	r3, r4, #4
 8002730:	1af2      	subs	r2, r6, r3
 8002732:	d0b6      	beq.n	80026a2 <_malloc_r+0x22>
 8002734:	1b9b      	subs	r3, r3, r6
 8002736:	50a3      	str	r3, [r4, r2]
 8002738:	e7b3      	b.n	80026a2 <_malloc_r+0x22>
 800273a:	6862      	ldr	r2, [r4, #4]
 800273c:	42a3      	cmp	r3, r4
 800273e:	bf0c      	ite	eq
 8002740:	6032      	streq	r2, [r6, #0]
 8002742:	605a      	strne	r2, [r3, #4]
 8002744:	e7ec      	b.n	8002720 <_malloc_r+0xa0>
 8002746:	4623      	mov	r3, r4
 8002748:	6864      	ldr	r4, [r4, #4]
 800274a:	e7b2      	b.n	80026b2 <_malloc_r+0x32>
 800274c:	4634      	mov	r4, r6
 800274e:	6876      	ldr	r6, [r6, #4]
 8002750:	e7b9      	b.n	80026c6 <_malloc_r+0x46>
 8002752:	230c      	movs	r3, #12
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4638      	mov	r0, r7
 8002758:	f000 f84c 	bl	80027f4 <__malloc_unlock>
 800275c:	e7a1      	b.n	80026a2 <_malloc_r+0x22>
 800275e:	6025      	str	r5, [r4, #0]
 8002760:	e7de      	b.n	8002720 <_malloc_r+0xa0>
 8002762:	bf00      	nop
 8002764:	20000094 	.word	0x20000094

08002768 <_realloc_r>:
 8002768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800276c:	4680      	mov	r8, r0
 800276e:	4614      	mov	r4, r2
 8002770:	460e      	mov	r6, r1
 8002772:	b921      	cbnz	r1, 800277e <_realloc_r+0x16>
 8002774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002778:	4611      	mov	r1, r2
 800277a:	f7ff bf81 	b.w	8002680 <_malloc_r>
 800277e:	b92a      	cbnz	r2, 800278c <_realloc_r+0x24>
 8002780:	f7ff ff12 	bl	80025a8 <_free_r>
 8002784:	4625      	mov	r5, r4
 8002786:	4628      	mov	r0, r5
 8002788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800278c:	f000 f838 	bl	8002800 <_malloc_usable_size_r>
 8002790:	4284      	cmp	r4, r0
 8002792:	4607      	mov	r7, r0
 8002794:	d802      	bhi.n	800279c <_realloc_r+0x34>
 8002796:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800279a:	d812      	bhi.n	80027c2 <_realloc_r+0x5a>
 800279c:	4621      	mov	r1, r4
 800279e:	4640      	mov	r0, r8
 80027a0:	f7ff ff6e 	bl	8002680 <_malloc_r>
 80027a4:	4605      	mov	r5, r0
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d0ed      	beq.n	8002786 <_realloc_r+0x1e>
 80027aa:	42bc      	cmp	r4, r7
 80027ac:	4622      	mov	r2, r4
 80027ae:	4631      	mov	r1, r6
 80027b0:	bf28      	it	cs
 80027b2:	463a      	movcs	r2, r7
 80027b4:	f7ff fed0 	bl	8002558 <memcpy>
 80027b8:	4631      	mov	r1, r6
 80027ba:	4640      	mov	r0, r8
 80027bc:	f7ff fef4 	bl	80025a8 <_free_r>
 80027c0:	e7e1      	b.n	8002786 <_realloc_r+0x1e>
 80027c2:	4635      	mov	r5, r6
 80027c4:	e7df      	b.n	8002786 <_realloc_r+0x1e>
	...

080027c8 <_sbrk_r>:
 80027c8:	b538      	push	{r3, r4, r5, lr}
 80027ca:	4d06      	ldr	r5, [pc, #24]	; (80027e4 <_sbrk_r+0x1c>)
 80027cc:	2300      	movs	r3, #0
 80027ce:	4604      	mov	r4, r0
 80027d0:	4608      	mov	r0, r1
 80027d2:	602b      	str	r3, [r5, #0]
 80027d4:	f7fe f988 	bl	8000ae8 <_sbrk>
 80027d8:	1c43      	adds	r3, r0, #1
 80027da:	d102      	bne.n	80027e2 <_sbrk_r+0x1a>
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	b103      	cbz	r3, 80027e2 <_sbrk_r+0x1a>
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	bd38      	pop	{r3, r4, r5, pc}
 80027e4:	2000009c 	.word	0x2000009c

080027e8 <__malloc_lock>:
 80027e8:	4801      	ldr	r0, [pc, #4]	; (80027f0 <__malloc_lock+0x8>)
 80027ea:	f000 b811 	b.w	8002810 <__retarget_lock_acquire_recursive>
 80027ee:	bf00      	nop
 80027f0:	200000a0 	.word	0x200000a0

080027f4 <__malloc_unlock>:
 80027f4:	4801      	ldr	r0, [pc, #4]	; (80027fc <__malloc_unlock+0x8>)
 80027f6:	f000 b80c 	b.w	8002812 <__retarget_lock_release_recursive>
 80027fa:	bf00      	nop
 80027fc:	200000a0 	.word	0x200000a0

08002800 <_malloc_usable_size_r>:
 8002800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002804:	1f18      	subs	r0, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	bfbc      	itt	lt
 800280a:	580b      	ldrlt	r3, [r1, r0]
 800280c:	18c0      	addlt	r0, r0, r3
 800280e:	4770      	bx	lr

08002810 <__retarget_lock_acquire_recursive>:
 8002810:	4770      	bx	lr

08002812 <__retarget_lock_release_recursive>:
 8002812:	4770      	bx	lr

08002814 <_init>:
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002816:	bf00      	nop
 8002818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281a:	bc08      	pop	{r3}
 800281c:	469e      	mov	lr, r3
 800281e:	4770      	bx	lr

08002820 <_fini>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr
